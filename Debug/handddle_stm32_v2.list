
handddle_stm32_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005280  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005444  08005444  00015444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005504  08005504  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  08005504  08005504  00015504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800550c  0800550c  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800550c  0800550c  0001550c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005510  08005510  00015510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08005514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000040  08005550  00020040  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08005550  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c1b  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f88  00000000  00000000  00039c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  0003cc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  0003daa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000231f1  00000000  00000000  0003e818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014120  00000000  00000000  00061a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0bc4  00000000  00000000  00075b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001466ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bf8  00000000  00000000  00146740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000040 	.word	0x20000040
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800542c 	.word	0x0800542c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000044 	.word	0x20000044
 8000200:	0800542c 	.word	0x0800542c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 ff0f 	bl	8001324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f8c3 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 fb59 	bl	8000bc0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050e:	f000 fb2d 	bl	8000b6c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000512:	f000 fa99 	bl	8000a48 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000516:	f000 f9df 	bl	80008d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800051a:	f000 fa41 	bl	80009a0 <MX_TIM3_Init>
  MX_TIM1_Init();
 800051e:	f000 f923 	bl	8000768 <MX_TIM1_Init>
  MX_TIM12_Init();
 8000522:	f000 fadf 	bl	8000ae4 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  /*     SMART LIGHT    */
  //RED -- TIMER 1 CH4
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000526:	210c      	movs	r1, #12
 8000528:	484a      	ldr	r0, [pc, #296]	; (8000654 <main+0x158>)
 800052a:	f002 f953 	bl	80027d4 <HAL_TIM_PWM_Start>
  //GREEN -- TIMER 1 CH3
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800052e:	2108      	movs	r1, #8
 8000530:	4848      	ldr	r0, [pc, #288]	; (8000654 <main+0x158>)
 8000532:	f002 f94f 	bl	80027d4 <HAL_TIM_PWM_Start>
  //BLUE TIMER 1 CH2
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000536:	2104      	movs	r1, #4
 8000538:	4846      	ldr	r0, [pc, #280]	; (8000654 <main+0x158>)
 800053a:	f002 f94b 	bl	80027d4 <HAL_TIM_PWM_Start>
  //WHITE -- TIMER 12 - CH1
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800053e:	2100      	movs	r1, #0
 8000540:	4845      	ldr	r0, [pc, #276]	; (8000658 <main+0x15c>)
 8000542:	f002 f947 	bl	80027d4 <HAL_TIM_PWM_Start>

  //Timers for PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // For PWM cooling fan
 8000546:	2100      	movs	r1, #0
 8000548:	4844      	ldr	r0, [pc, #272]	; (800065c <main+0x160>)
 800054a:	f002 f943 	bl	80027d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // For PWM heater fan
 800054e:	210c      	movs	r1, #12
 8000550:	4842      	ldr	r0, [pc, #264]	; (800065c <main+0x160>)
 8000552:	f002 f93f 	bl	80027d4 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); // To get tachymeter frequency
 8000556:	2100      	movs	r1, #0
 8000558:	4841      	ldr	r0, [pc, #260]	; (8000660 <main+0x164>)
 800055a:	f002 fa53 	bl	8002a04 <HAL_TIM_IC_Start_IT>

  // Timer ticks each second
  HAL_TIM_Base_Start_IT(&htim4);
 800055e:	4841      	ldr	r0, [pc, #260]	; (8000664 <main+0x168>)
 8000560:	f002 f878 	bl	8002654 <HAL_TIM_Base_Start_IT>

  // Start UART reception
  HAL_UART_Receive_IT(&huart2, rx_buffer, MSG_SIZE);
 8000564:	2214      	movs	r2, #20
 8000566:	4940      	ldr	r1, [pc, #256]	; (8000668 <main+0x16c>)
 8000568:	4840      	ldr	r0, [pc, #256]	; (800066c <main+0x170>)
 800056a:	f003 fcfe 	bl	8003f6a <HAL_UART_Receive_IT>
  //Ack value send to the Jetson Nano
  send_cmd_ack_with_value(&huart2, DEFAULT_ACK_VALUE);
 800056e:	2101      	movs	r1, #1
 8000570:	483e      	ldr	r0, [pc, #248]	; (800066c <main+0x170>)
 8000572:	f004 fd83 	bl	800507c <send_cmd_ack_with_value>

  set_cooling_fan_pwm(PWM_STOP, &htim2);
 8000576:	4939      	ldr	r1, [pc, #228]	; (800065c <main+0x160>)
 8000578:	2000      	movs	r0, #0
 800057a:	f004 fbdf 	bl	8004d3c <set_cooling_fan_pwm>
  set_heater_fan_pwm(PWM_STOP, &htim2);
 800057e:	4937      	ldr	r1, [pc, #220]	; (800065c <main+0x160>)
 8000580:	2000      	movs	r0, #0
 8000582:	f004 fc25 	bl	8004dd0 <set_heater_fan_pwm>

  if((MSG_HEADER_UID_1_TYPOLOGY == TYPE_MACHINE_RACK) || (MSG_HEADER_UID_1_TYPOLOGY == TYPE_MACHINE_TOIT))
  {
	  light_color = WHITE;
 8000586:	4b3a      	ldr	r3, [pc, #232]	; (8000670 <main+0x174>)
 8000588:	2206      	movs	r2, #6
 800058a:	701a      	strb	r2, [r3, #0]
  } else if(MSG_HEADER_UID_1_TYPOLOGY == TYPE_POST_TREATMENT)
  {
	  light_color =  WHITE_PT;
  }

  previous_light_color = light_color;
 800058c:	4b38      	ldr	r3, [pc, #224]	; (8000670 <main+0x174>)
 800058e:	781a      	ldrb	r2, [r3, #0]
 8000590:	4b38      	ldr	r3, [pc, #224]	; (8000674 <main+0x178>)
 8000592:	701a      	strb	r2, [r3, #0]
  send_main_msg_light_color(light_color, &huart2);
 8000594:	4b36      	ldr	r3, [pc, #216]	; (8000670 <main+0x174>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	4934      	ldr	r1, [pc, #208]	; (800066c <main+0x170>)
 800059a:	4618      	mov	r0, r3
 800059c:	f004 fcca 	bl	8004f34 <send_main_msg_light_color>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(uart_irq_is_captured == true)
 80005a0:	4b35      	ldr	r3, [pc, #212]	; (8000678 <main+0x17c>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d010      	beq.n	80005ca <main+0xce>
	  {
		  uart_irq_is_captured = false;
 80005a8:	4b33      	ldr	r3, [pc, #204]	; (8000678 <main+0x17c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
		  parser(rx_buffer,&huart2);
 80005ae:	492f      	ldr	r1, [pc, #188]	; (800066c <main+0x170>)
 80005b0:	482d      	ldr	r0, [pc, #180]	; (8000668 <main+0x16c>)
 80005b2:	f004 fedb 	bl	800536c <parser>
		  memset(rx_buffer, ZERO, sizeof(rx_buffer));
 80005b6:	2214      	movs	r2, #20
 80005b8:	2100      	movs	r1, #0
 80005ba:	482b      	ldr	r0, [pc, #172]	; (8000668 <main+0x16c>)
 80005bc:	f004 ff2e 	bl	800541c <memset>
		  HAL_UART_Receive_IT(&huart2, rx_buffer, MSG_SIZE);
 80005c0:	2214      	movs	r2, #20
 80005c2:	4929      	ldr	r1, [pc, #164]	; (8000668 <main+0x16c>)
 80005c4:	4829      	ldr	r0, [pc, #164]	; (800066c <main+0x170>)
 80005c6:	f003 fcd0 	bl	8003f6a <HAL_UART_Receive_IT>
	  }

	  set_cooling_fan_pwm(pwm_cooling_fan, &htim2);
 80005ca:	4b2c      	ldr	r3, [pc, #176]	; (800067c <main+0x180>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	4923      	ldr	r1, [pc, #140]	; (800065c <main+0x160>)
 80005d0:	4618      	mov	r0, r3
 80005d2:	f004 fbb3 	bl	8004d3c <set_cooling_fan_pwm>
	  set_heater_fan_pwm(pwm_heater_fan, &htim2);
 80005d6:	4b2a      	ldr	r3, [pc, #168]	; (8000680 <main+0x184>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	4920      	ldr	r1, [pc, #128]	; (800065c <main+0x160>)
 80005dc:	4618      	mov	r0, r3
 80005de:	f004 fbf7 	bl	8004dd0 <set_heater_fan_pwm>

	  set_lights(light_color);
 80005e2:	4b23      	ldr	r3, [pc, #140]	; (8000670 <main+0x174>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 fc08 	bl	8004dfc <set_lights>

	  if(send_sec_messages == true)
 80005ec:	4b25      	ldr	r3, [pc, #148]	; (8000684 <main+0x188>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d01b      	beq.n	800062c <main+0x130>
	  {
		  send_sec_messages = false;
 80005f4:	4b23      	ldr	r3, [pc, #140]	; (8000684 <main+0x188>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
//		  uint16_t frq = get_cooling_frequency();
		  uint16_t rpm = get_cooling_rpm();
 80005fa:	f004 fbd7 	bl	8004dac <get_cooling_rpm>
 80005fe:	4603      	mov	r3, r0
 8000600:	80fb      	strh	r3, [r7, #6]
		  send_sec_msg_air_extraction_tachymeter(rpm, &huart2);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	4919      	ldr	r1, [pc, #100]	; (800066c <main+0x170>)
 8000606:	4618      	mov	r0, r3
 8000608:	f004 fcc8 	bl	8004f9c <send_sec_msg_air_extraction_tachymeter>

		  if(previous_light_color != light_color)
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <main+0x178>)
 800060e:	781a      	ldrb	r2, [r3, #0]
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <main+0x174>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	429a      	cmp	r2, r3
 8000616:	d009      	beq.n	800062c <main+0x130>
		  {
			  send_main_msg_light_color(light_color, &huart2);
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <main+0x174>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4913      	ldr	r1, [pc, #76]	; (800066c <main+0x170>)
 800061e:	4618      	mov	r0, r3
 8000620:	f004 fc88 	bl	8004f34 <send_main_msg_light_color>
			  previous_light_color = light_color;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <main+0x174>)
 8000626:	781a      	ldrb	r2, [r3, #0]
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <main+0x178>)
 800062a:	701a      	strb	r2, [r3, #0]
		  }

	  }

	  if(watchdog_actived == true)
 800062c:	4b16      	ldr	r3, [pc, #88]	; (8000688 <main+0x18c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d004      	beq.n	800063e <main+0x142>
	  {
		  watchdog_actived = false;
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <main+0x18c>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
		  HAL_NVIC_SystemReset();
 800063a:	f001 f800 	bl	800163e <HAL_NVIC_SystemReset>
	  }

	  if(watchdog_update == true)
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <main+0x190>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0ac      	beq.n	80005a0 <main+0xa4>
	  {
		  watchdog_update = false;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <main+0x190>)
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
		  update_last_watchdog_time();
 800064c:	f000 fb0a 	bl	8000c64 <update_last_watchdog_time>
	  if(uart_irq_is_captured == true)
 8000650:	e7a6      	b.n	80005a0 <main+0xa4>
 8000652:	bf00      	nop
 8000654:	20000130 	.word	0x20000130
 8000658:	20000224 	.word	0x20000224
 800065c:	2000018c 	.word	0x2000018c
 8000660:	200000d4 	.word	0x200000d4
 8000664:	20000080 	.word	0x20000080
 8000668:	2000011c 	.word	0x2000011c
 800066c:	200001d8 	.word	0x200001d8
 8000670:	20000060 	.word	0x20000060
 8000674:	20000079 	.word	0x20000079
 8000678:	2000007a 	.word	0x2000007a
 800067c:	2000005e 	.word	0x2000005e
 8000680:	2000005f 	.word	0x2000005f
 8000684:	20000078 	.word	0x20000078
 8000688:	2000005c 	.word	0x2000005c
 800068c:	2000005d 	.word	0x2000005d

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2234      	movs	r2, #52	; 0x34
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 febc 	bl	800541c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <SystemClock_Config+0xd0>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a28      	ldr	r2, [pc, #160]	; (8000760 <SystemClock_Config+0xd0>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b26      	ldr	r3, [pc, #152]	; (8000760 <SystemClock_Config+0xd0>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <SystemClock_Config+0xd4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <SystemClock_Config+0xd4>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <SystemClock_Config+0xd4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000700:	2300      	movs	r3, #0
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000704:	2310      	movs	r3, #16
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000708:	23a0      	movs	r3, #160	; 0xa0
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800070c:	2304      	movs	r3, #4
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4618      	mov	r0, r3
 800071e:	f001 fcab 	bl	8002078 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000728:	f000 fb84 	bl	8000e34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f001 f9ca 	bl	8001ae0 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000752:	f000 fb6f 	bl	8000e34 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b096      	sub	sp, #88	; 0x58
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
 8000796:	615a      	str	r2, [r3, #20]
 8000798:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2220      	movs	r2, #32
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f004 fe3b 	bl	800541c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a6:	4b4a      	ldr	r3, [pc, #296]	; (80008d0 <MX_TIM1_Init+0x168>)
 80007a8:	4a4a      	ldr	r2, [pc, #296]	; (80008d4 <MX_TIM1_Init+0x16c>)
 80007aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 80007ac:	4b48      	ldr	r3, [pc, #288]	; (80008d0 <MX_TIM1_Init+0x168>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b2:	4b47      	ldr	r3, [pc, #284]	; (80008d0 <MX_TIM1_Init+0x168>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80007b8:	4b45      	ldr	r3, [pc, #276]	; (80008d0 <MX_TIM1_Init+0x168>)
 80007ba:	2263      	movs	r2, #99	; 0x63
 80007bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007be:	4b44      	ldr	r3, [pc, #272]	; (80008d0 <MX_TIM1_Init+0x168>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c4:	4b42      	ldr	r3, [pc, #264]	; (80008d0 <MX_TIM1_Init+0x168>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ca:	4b41      	ldr	r3, [pc, #260]	; (80008d0 <MX_TIM1_Init+0x168>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d0:	483f      	ldr	r0, [pc, #252]	; (80008d0 <MX_TIM1_Init+0x168>)
 80007d2:	f001 feef 	bl	80025b4 <HAL_TIM_Base_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80007dc:	f000 fb2a 	bl	8000e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007ea:	4619      	mov	r1, r3
 80007ec:	4838      	ldr	r0, [pc, #224]	; (80008d0 <MX_TIM1_Init+0x168>)
 80007ee:	f002 fc97 	bl	8003120 <HAL_TIM_ConfigClockSource>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80007f8:	f000 fb1c 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007fc:	4834      	ldr	r0, [pc, #208]	; (80008d0 <MX_TIM1_Init+0x168>)
 80007fe:	f001 ff99 	bl	8002734 <HAL_TIM_PWM_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000808:	f000 fb14 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080c:	2300      	movs	r3, #0
 800080e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000814:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000818:	4619      	mov	r1, r3
 800081a:	482d      	ldr	r0, [pc, #180]	; (80008d0 <MX_TIM1_Init+0x168>)
 800081c:	f003 f9e4 	bl	8003be8 <HAL_TIMEx_MasterConfigSynchronization>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000826:	f000 fb05 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082a:	2360      	movs	r3, #96	; 0x60
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000832:	2300      	movs	r3, #0
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000836:	2300      	movs	r3, #0
 8000838:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800083e:	2300      	movs	r3, #0
 8000840:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084a:	2204      	movs	r2, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4820      	ldr	r0, [pc, #128]	; (80008d0 <MX_TIM1_Init+0x168>)
 8000850:	f002 fba4 	bl	8002f9c <HAL_TIM_PWM_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800085a:	f000 faeb 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	2208      	movs	r2, #8
 8000864:	4619      	mov	r1, r3
 8000866:	481a      	ldr	r0, [pc, #104]	; (80008d0 <MX_TIM1_Init+0x168>)
 8000868:	f002 fb98 	bl	8002f9c <HAL_TIM_PWM_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000872:	f000 fadf 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087a:	220c      	movs	r2, #12
 800087c:	4619      	mov	r1, r3
 800087e:	4814      	ldr	r0, [pc, #80]	; (80008d0 <MX_TIM1_Init+0x168>)
 8000880:	f002 fb8c 	bl	8002f9c <HAL_TIM_PWM_ConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800088a:	f000 fad3 	bl	8000e34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	4619      	mov	r1, r3
 80008b0:	4807      	ldr	r0, [pc, #28]	; (80008d0 <MX_TIM1_Init+0x168>)
 80008b2:	f003 fa15 	bl	8003ce0 <HAL_TIMEx_ConfigBreakDeadTime>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80008bc:	f000 faba 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <MX_TIM1_Init+0x168>)
 80008c2:	f000 fba9 	bl	8001018 <HAL_TIM_MspPostInit>

}
 80008c6:	bf00      	nop
 80008c8:	3758      	adds	r7, #88	; 0x58
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000130 	.word	0x20000130
 80008d4:	40010000 	.word	0x40010000

080008d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008de:	f107 0320 	add.w	r3, r7, #32
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]
 80008f6:	615a      	str	r2, [r3, #20]
 80008f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008fa:	4b28      	ldr	r3, [pc, #160]	; (800099c <MX_TIM2_Init+0xc4>)
 80008fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000900:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2000-1;
 8000902:	4b26      	ldr	r3, [pc, #152]	; (800099c <MX_TIM2_Init+0xc4>)
 8000904:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000908:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090a:	4b24      	ldr	r3, [pc, #144]	; (800099c <MX_TIM2_Init+0xc4>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000910:	4b22      	ldr	r3, [pc, #136]	; (800099c <MX_TIM2_Init+0xc4>)
 8000912:	2263      	movs	r2, #99	; 0x63
 8000914:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000916:	4b21      	ldr	r3, [pc, #132]	; (800099c <MX_TIM2_Init+0xc4>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <MX_TIM2_Init+0xc4>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000922:	481e      	ldr	r0, [pc, #120]	; (800099c <MX_TIM2_Init+0xc4>)
 8000924:	f001 ff06 	bl	8002734 <HAL_TIM_PWM_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800092e:	f000 fa81 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800093a:	f107 0320 	add.w	r3, r7, #32
 800093e:	4619      	mov	r1, r3
 8000940:	4816      	ldr	r0, [pc, #88]	; (800099c <MX_TIM2_Init+0xc4>)
 8000942:	f003 f951 	bl	8003be8 <HAL_TIMEx_MasterConfigSynchronization>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800094c:	f000 fa72 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000950:	2360      	movs	r3, #96	; 0x60
 8000952:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2200      	movs	r2, #0
 8000964:	4619      	mov	r1, r3
 8000966:	480d      	ldr	r0, [pc, #52]	; (800099c <MX_TIM2_Init+0xc4>)
 8000968:	f002 fb18 	bl	8002f9c <HAL_TIM_PWM_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000972:	f000 fa5f 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	220c      	movs	r2, #12
 800097a:	4619      	mov	r1, r3
 800097c:	4807      	ldr	r0, [pc, #28]	; (800099c <MX_TIM2_Init+0xc4>)
 800097e:	f002 fb0d 	bl	8002f9c <HAL_TIM_PWM_ConfigChannel>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000988:	f000 fa54 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800098c:	4803      	ldr	r0, [pc, #12]	; (800099c <MX_TIM2_Init+0xc4>)
 800098e:	f000 fb43 	bl	8001018 <HAL_TIM_MspPostInit>

}
 8000992:	bf00      	nop
 8000994:	3728      	adds	r7, #40	; 0x28
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2000018c 	.word	0x2000018c

080009a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009b0:	463b      	mov	r3, r7
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009bc:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <MX_TIM3_Init+0xa0>)
 80009be:	4a21      	ldr	r2, [pc, #132]	; (8000a44 <MX_TIM3_Init+0xa4>)
 80009c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2000-1;
 80009c2:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <MX_TIM3_Init+0xa0>)
 80009c4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80009c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <MX_TIM3_Init+0xa0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <MX_TIM3_Init+0xa0>)
 80009d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d8:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <MX_TIM3_Init+0xa0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <MX_TIM3_Init+0xa0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80009e4:	4816      	ldr	r0, [pc, #88]	; (8000a40 <MX_TIM3_Init+0xa0>)
 80009e6:	f001 ffbd 	bl	8002964 <HAL_TIM_IC_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80009f0:	f000 fa20 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	4619      	mov	r1, r3
 8000a02:	480f      	ldr	r0, [pc, #60]	; (8000a40 <MX_TIM3_Init+0xa0>)
 8000a04:	f003 f8f0 	bl	8003be8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000a0e:	f000 fa11 	bl	8000e34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a16:	2301      	movs	r3, #1
 8000a18:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a22:	463b      	mov	r3, r7
 8000a24:	2200      	movs	r2, #0
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_TIM3_Init+0xa0>)
 8000a2a:	f002 fa1b 	bl	8002e64 <HAL_TIM_IC_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a34:	f000 f9fe 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200000d4 	.word	0x200000d4
 8000a44:	40000400 	.word	0x40000400

08000a48 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <MX_TIM4_Init+0x94>)
 8000a66:	4a1e      	ldr	r2, [pc, #120]	; (8000ae0 <MX_TIM4_Init+0x98>)
 8000a68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000-1;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MX_TIM4_Init+0x94>)
 8000a6c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000a70:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_TIM4_Init+0x94>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_TIM4_Init+0x94>)
 8000a7a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a7e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <MX_TIM4_Init+0x94>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_TIM4_Init+0x94>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a8c:	4813      	ldr	r0, [pc, #76]	; (8000adc <MX_TIM4_Init+0x94>)
 8000a8e:	f001 fd91 	bl	80025b4 <HAL_TIM_Base_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000a98:	f000 f9cc 	bl	8000e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <MX_TIM4_Init+0x94>)
 8000aaa:	f002 fb39 	bl	8003120 <HAL_TIM_ConfigClockSource>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000ab4:	f000 f9be 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_TIM4_Init+0x94>)
 8000ac6:	f003 f88f 	bl	8003be8 <HAL_TIMEx_MasterConfigSynchronization>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000ad0:	f000 f9b0 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000080 	.word	0x20000080
 8000ae0:	40000800 	.word	0x40000800

08000ae4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
 8000af8:	615a      	str	r2, [r3, #20]
 8000afa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <MX_TIM12_Init+0x80>)
 8000afe:	4a1a      	ldr	r2, [pc, #104]	; (8000b68 <MX_TIM12_Init+0x84>)
 8000b00:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2-1;
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_TIM12_Init+0x80>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_TIM12_Init+0x80>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 100-1;
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <MX_TIM12_Init+0x80>)
 8000b10:	2263      	movs	r2, #99	; 0x63
 8000b12:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_TIM12_Init+0x80>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_TIM12_Init+0x80>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000b20:	4810      	ldr	r0, [pc, #64]	; (8000b64 <MX_TIM12_Init+0x80>)
 8000b22:	f001 fe07 	bl	8002734 <HAL_TIM_PWM_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8000b2c:	f000 f982 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b30:	2360      	movs	r3, #96	; 0x60
 8000b32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2200      	movs	r2, #0
 8000b44:	4619      	mov	r1, r3
 8000b46:	4807      	ldr	r0, [pc, #28]	; (8000b64 <MX_TIM12_Init+0x80>)
 8000b48:	f002 fa28 	bl	8002f9c <HAL_TIM_PWM_ConfigChannel>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8000b52:	f000 f96f 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000b56:	4803      	ldr	r0, [pc, #12]	; (8000b64 <MX_TIM12_Init+0x80>)
 8000b58:	f000 fa5e 	bl	8001018 <HAL_TIM_MspPostInit>

}
 8000b5c:	bf00      	nop
 8000b5e:	3720      	adds	r7, #32
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000224 	.word	0x20000224
 8000b68:	40001800 	.word	0x40001800

08000b6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <MX_USART2_UART_Init+0x50>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000ba4:	f003 f902 	bl	8003dac <HAL_UART_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bae:	f000 f941 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200001d8 	.word	0x200001d8
 8000bbc:	40004400 	.word	0x40004400

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <MX_GPIO_Init+0x9c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a1f      	ldr	r2, [pc, #124]	; (8000c5c <MX_GPIO_Init+0x9c>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_GPIO_Init+0x9c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_GPIO_Init+0x9c>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <MX_GPIO_Init+0x9c>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_GPIO_Init+0x9c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_GPIO_Init+0x9c>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a11      	ldr	r2, [pc, #68]	; (8000c5c <MX_GPIO_Init+0x9c>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_GPIO_Init+0x9c>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c30:	480b      	ldr	r0, [pc, #44]	; (8000c60 <MX_GPIO_Init+0xa0>)
 8000c32:	f000 ff3b 	bl	8001aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HEATER_Pin */
  GPIO_InitStruct.Pin = HEATER_Pin;
 8000c36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4804      	ldr	r0, [pc, #16]	; (8000c60 <MX_GPIO_Init+0xa0>)
 8000c50:	f000 fd98 	bl	8001784 <HAL_GPIO_Init>

}
 8000c54:	bf00      	nop
 8000c56:	3720      	adds	r7, #32
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020400 	.word	0x40020400

08000c64 <update_last_watchdog_time>:

/* USER CODE BEGIN 4 */
void update_last_watchdog_time(){
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
	last_watchdog_time = var_timer_4_tick;
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <update_last_watchdog_time+0x1c>)
 8000c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c6e:	4905      	ldr	r1, [pc, #20]	; (8000c84 <update_last_watchdog_time+0x20>)
 8000c70:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000070 	.word	0x20000070
 8000c84:	20000068 	.word	0x20000068

08000c88 <HAL_TIM_PeriodElapsedCallback>:

/**
 * @brief Callback called after a period of a timer
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c88:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	6809      	ldr	r1, [r1, #0]
 8000c96:	4823      	ldr	r0, [pc, #140]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c98:	4281      	cmp	r1, r0
 8000c9a:	d13c      	bne.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x8e>
	{

		if(var_timer_4_tick % 2 == 0) // each 2s
 8000c9c:	4922      	ldr	r1, [pc, #136]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ca2:	f04f 0a01 	mov.w	sl, #1
 8000ca6:	f04f 0b00 	mov.w	fp, #0
 8000caa:	ea00 020a 	and.w	r2, r0, sl
 8000cae:	ea01 030b 	and.w	r3, r1, fp
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	d126      	bne.n	8000d04 <HAL_TIM_PeriodElapsedCallback+0x7c>
		{
			send_sec_messages = true;
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]

			if(last_watchdog_time > var_timer_4_tick)
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc2:	4919      	ldr	r1, [pc, #100]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000cc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	bf08      	it	eq
 8000ccc:	4290      	cmpeq	r0, r2
 8000cce:	d206      	bcs.n	8000cde <HAL_TIM_PeriodElapsedCallback+0x56>
			{ // Clock overflow

				last_watchdog_time = 0;
 8000cd0:	4917      	ldr	r1, [pc, #92]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000cd2:	f04f 0200 	mov.w	r2, #0
 8000cd6:	f04f 0300 	mov.w	r3, #0
 8000cda:	e9c1 2300 	strd	r2, r3, [r1]
			}
			if(var_timer_4_tick - last_watchdog_time > 10)
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000ce0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cea:	ebb0 0802 	subs.w	r8, r0, r2
 8000cee:	eb61 0903 	sbc.w	r9, r1, r3
 8000cf2:	f1b9 0f00 	cmp.w	r9, #0
 8000cf6:	bf08      	it	eq
 8000cf8:	f1b8 0f0b 	cmpeq.w	r8, #11
 8000cfc:	d302      	bcc.n	8000d04 <HAL_TIM_PeriodElapsedCallback+0x7c>
			{ // Watchdog 10s

				watchdog_actived = true;
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	701a      	strb	r2, [r3, #0]
			}
		}

		var_timer_4_tick += 1;
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0a:	1c54      	adds	r4, r2, #1
 8000d0c:	f143 0500 	adc.w	r5, r3, #0
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000d12:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40000800 	.word	0x40000800
 8000d28:	20000070 	.word	0x20000070
 8000d2c:	20000078 	.word	0x20000078
 8000d30:	20000068 	.word	0x20000068
 8000d34:	2000005c 	.word	0x2000005c

08000d38 <HAL_UART_RxCpltCallback>:

/**
 * @brief Callback used when received a message (full buffer)
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <HAL_UART_RxCpltCallback+0x24>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d102      	bne.n	8000d50 <HAL_UART_RxCpltCallback+0x18>
	{
		uart_irq_is_captured = true;
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_UART_RxCpltCallback+0x28>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	701a      	strb	r2, [r3, #0]
//		parser(rx_buffer,&huart2);
//		memset(rx_buffer, 0, sizeof(rx_buffer));
//		HAL_UART_Receive_IT(&huart2, rx_buffer, MSG_SIZE);
	}
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	40004400 	.word	0x40004400
 8000d60:	2000007a 	.word	0x2000007a

08000d64 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	if(htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1) // Tachymeter channel
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7f1b      	ldrb	r3, [r3, #28]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d14e      	bne.n	8000e12 <HAL_TIM_IC_CaptureCallback+0xae>
	{
		if(is_first_captured_cooling == 0)
 8000d74:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d10b      	bne.n	8000d94 <HAL_TIM_IC_CaptureCallback+0x30>
		{
			ic_val1_cooling = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f002 fa96 	bl	80032b0 <HAL_TIM_ReadCapturedValue>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461a      	mov	r2, r3
 8000d88:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000d8a:	601a      	str	r2, [r3, #0]
			is_first_captured_cooling = 1;
 8000d8c:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	601a      	str	r2, [r3, #0]

			__HAL_TIM_SET_COUNTER(htim, 0);
			is_first_captured_cooling = 0;
		}
	}
}
 8000d92:	e03e      	b.n	8000e12 <HAL_TIM_IC_CaptureCallback+0xae>
			ic_val2_cooling = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000d94:	2100      	movs	r1, #0
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f002 fa8a 	bl	80032b0 <HAL_TIM_ReadCapturedValue>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000da2:	601a      	str	r2, [r3, #0]
			if (ic_val2_cooling > ic_val1_cooling) {
 8000da4:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	dd07      	ble.n	8000dc0 <HAL_TIM_IC_CaptureCallback+0x5c>
				difference_cooling = ic_val2_cooling - ic_val1_cooling;
 8000db0:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	4a1b      	ldr	r2, [pc, #108]	; (8000e28 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	e00f      	b.n	8000de0 <HAL_TIM_IC_CaptureCallback+0x7c>
			} else if (ic_val1_cooling > ic_val2_cooling) {
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	dd09      	ble.n	8000de0 <HAL_TIM_IC_CaptureCallback+0x7c>
				difference_cooling = (0xffffffff - ic_val1_cooling) + ic_val2_cooling;
 8000dcc:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000dde:	601a      	str	r2, [r3, #0]
			float refClock = TIMCLOCK/PRESCALER;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000de2:	60fb      	str	r3, [r7, #12]
			cooling_fan_frequency = refClock/difference_cooling;
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	ee07 3a90 	vmov	s15, r3
 8000dec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000df0:	edd7 6a03 	vldr	s13, [r7, #12]
 8000df4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000df8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dfc:	ee17 2a90 	vmov	r2, s15
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000e02:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_captured_cooling = 0;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200000d0 	.word	0x200000d0
 8000e20:	2000017c 	.word	0x2000017c
 8000e24:	20000178 	.word	0x20000178
 8000e28:	200000cc 	.word	0x200000cc
 8000e2c:	461c4000 	.word	0x461c4000
 8000e30:	20000188 	.word	0x20000188

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <Error_Handler+0x8>
	...

08000e40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	6413      	str	r3, [r2, #64]	; 0x40
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e7e:	2007      	movs	r0, #7
 8000e80:	f000 fba8 	bl	80015d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40023800 	.word	0x40023800

08000e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <HAL_TIM_Base_MspInit+0x70>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d10e      	bne.n	8000ec0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_TIM_Base_MspInit+0x74>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a16      	ldr	r2, [pc, #88]	; (8000f04 <HAL_TIM_Base_MspInit+0x74>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_TIM_Base_MspInit+0x74>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ebe:	e01a      	b.n	8000ef6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a10      	ldr	r2, [pc, #64]	; (8000f08 <HAL_TIM_Base_MspInit+0x78>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d115      	bne.n	8000ef6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <HAL_TIM_Base_MspInit+0x74>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	4a0c      	ldr	r2, [pc, #48]	; (8000f04 <HAL_TIM_Base_MspInit+0x74>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_TIM_Base_MspInit+0x74>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	201e      	movs	r0, #30
 8000eec:	f000 fb7d 	bl	80015ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ef0:	201e      	movs	r0, #30
 8000ef2:	f000 fb96 	bl	8001622 <HAL_NVIC_EnableIRQ>
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40010000 	.word	0x40010000
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40000800 	.word	0x40000800

08000f0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f1c:	d10e      	bne.n	8000f3c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <HAL_TIM_PWM_MspInit+0x64>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <HAL_TIM_PWM_MspInit+0x64>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <HAL_TIM_PWM_MspInit+0x64>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000f3a:	e012      	b.n	8000f62 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0c      	ldr	r2, [pc, #48]	; (8000f74 <HAL_TIM_PWM_MspInit+0x68>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d10d      	bne.n	8000f62 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_TIM_PWM_MspInit+0x64>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <HAL_TIM_PWM_MspInit+0x64>)
 8000f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f54:	6413      	str	r3, [r2, #64]	; 0x40
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_TIM_PWM_MspInit+0x64>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40001800 	.word	0x40001800

08000f78 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a1d      	ldr	r2, [pc, #116]	; (800100c <HAL_TIM_IC_MspInit+0x94>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d133      	bne.n	8001002 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <HAL_TIM_IC_MspInit+0x98>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a1b      	ldr	r2, [pc, #108]	; (8001010 <HAL_TIM_IC_MspInit+0x98>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <HAL_TIM_IC_MspInit+0x98>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_TIM_IC_MspInit+0x98>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a14      	ldr	r2, [pc, #80]	; (8001010 <HAL_TIM_IC_MspInit+0x98>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_TIM_IC_MspInit+0x98>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TACHY_COOLING_FAN_Pin;
 8000fd2:	2340      	movs	r3, #64	; 0x40
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TACHY_COOLING_FAN_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	4809      	ldr	r0, [pc, #36]	; (8001014 <HAL_TIM_IC_MspInit+0x9c>)
 8000fee:	f000 fbc9 	bl	8001784 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	201d      	movs	r0, #29
 8000ff8:	f000 faf7 	bl	80015ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ffc:	201d      	movs	r0, #29
 8000ffe:	f000 fb10 	bl	8001622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001002:	bf00      	nop
 8001004:	3728      	adds	r7, #40	; 0x28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40000400 	.word	0x40000400
 8001010:	40023800 	.word	0x40023800
 8001014:	40020800 	.word	0x40020800

08001018 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08c      	sub	sp, #48	; 0x30
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a46      	ldr	r2, [pc, #280]	; (8001150 <HAL_TIM_MspPostInit+0x138>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d11f      	bne.n	800107a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	4b45      	ldr	r3, [pc, #276]	; (8001154 <HAL_TIM_MspPostInit+0x13c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a44      	ldr	r2, [pc, #272]	; (8001154 <HAL_TIM_MspPostInit+0x13c>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b42      	ldr	r3, [pc, #264]	; (8001154 <HAL_TIM_MspPostInit+0x13c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	61bb      	str	r3, [r7, #24]
 8001054:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = BLUE_LIGHT_Pin|GREEN_LIGHT_Pin|RED_LIGHT_Pin;
 8001056:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800105a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001068:	2301      	movs	r3, #1
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	4619      	mov	r1, r3
 8001072:	4839      	ldr	r0, [pc, #228]	; (8001158 <HAL_TIM_MspPostInit+0x140>)
 8001074:	f000 fb86 	bl	8001784 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001078:	e065      	b.n	8001146 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM2)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001082:	d13c      	bne.n	80010fe <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	4b32      	ldr	r3, [pc, #200]	; (8001154 <HAL_TIM_MspPostInit+0x13c>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	4a31      	ldr	r2, [pc, #196]	; (8001154 <HAL_TIM_MspPostInit+0x13c>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	6313      	str	r3, [r2, #48]	; 0x30
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <HAL_TIM_MspPostInit+0x13c>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <HAL_TIM_MspPostInit+0x13c>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	4a2a      	ldr	r2, [pc, #168]	; (8001154 <HAL_TIM_MspPostInit+0x13c>)
 80010aa:	f043 0302 	orr.w	r3, r3, #2
 80010ae:	6313      	str	r3, [r2, #48]	; 0x30
 80010b0:	4b28      	ldr	r3, [pc, #160]	; (8001154 <HAL_TIM_MspPostInit+0x13c>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = COOLING_FAN_PWM_Pin;
 80010bc:	2320      	movs	r3, #32
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010cc:	2301      	movs	r3, #1
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(COOLING_FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	4619      	mov	r1, r3
 80010d6:	4820      	ldr	r0, [pc, #128]	; (8001158 <HAL_TIM_MspPostInit+0x140>)
 80010d8:	f000 fb54 	bl	8001784 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HEATER_FAN_PWM_Pin;
 80010dc:	2304      	movs	r3, #4
 80010de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010ec:	2301      	movs	r3, #1
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HEATER_FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	4819      	ldr	r0, [pc, #100]	; (800115c <HAL_TIM_MspPostInit+0x144>)
 80010f8:	f000 fb44 	bl	8001784 <HAL_GPIO_Init>
}
 80010fc:	e023      	b.n	8001146 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM12)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a17      	ldr	r2, [pc, #92]	; (8001160 <HAL_TIM_MspPostInit+0x148>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d11e      	bne.n	8001146 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <HAL_TIM_MspPostInit+0x13c>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	4a10      	ldr	r2, [pc, #64]	; (8001154 <HAL_TIM_MspPostInit+0x13c>)
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	6313      	str	r3, [r2, #48]	; 0x30
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_TIM_MspPostInit+0x13c>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = WHITE_LIGHT_Pin;
 8001124:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001136:	2309      	movs	r3, #9
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(WHITE_LIGHT_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	4806      	ldr	r0, [pc, #24]	; (800115c <HAL_TIM_MspPostInit+0x144>)
 8001142:	f000 fb1f 	bl	8001784 <HAL_GPIO_Init>
}
 8001146:	bf00      	nop
 8001148:	3730      	adds	r7, #48	; 0x30
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40010000 	.word	0x40010000
 8001154:	40023800 	.word	0x40023800
 8001158:	40020000 	.word	0x40020000
 800115c:	40020400 	.word	0x40020400
 8001160:	40001800 	.word	0x40001800

08001164 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a1d      	ldr	r2, [pc, #116]	; (80011f8 <HAL_UART_MspInit+0x94>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d133      	bne.n	80011ee <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <HAL_UART_MspInit+0x98>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a1b      	ldr	r2, [pc, #108]	; (80011fc <HAL_UART_MspInit+0x98>)
 8001190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_UART_MspInit+0x98>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_UART_MspInit+0x98>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a14      	ldr	r2, [pc, #80]	; (80011fc <HAL_UART_MspInit+0x98>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_UART_MspInit+0x98>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011be:	230c      	movs	r3, #12
 80011c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011ce:	2307      	movs	r3, #7
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	4809      	ldr	r0, [pc, #36]	; (8001200 <HAL_UART_MspInit+0x9c>)
 80011da:	f000 fad3 	bl	8001784 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2026      	movs	r0, #38	; 0x26
 80011e4:	f000 fa01 	bl	80015ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011e8:	2026      	movs	r0, #38	; 0x26
 80011ea:	f000 fa1a 	bl	8001622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ee:	bf00      	nop
 80011f0:	3728      	adds	r7, #40	; 0x28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40004400 	.word	0x40004400
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020000 	.word	0x40020000

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <NMI_Handler+0x4>

0800120a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <HardFault_Handler+0x4>

08001210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <MemManage_Handler+0x4>

08001216 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <BusFault_Handler+0x4>

0800121c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <UsageFault_Handler+0x4>

08001222 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001250:	f000 f8ba 	bl	80013c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}

08001258 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <TIM3_IRQHandler+0x10>)
 800125e:	f001 fcf9 	bl	8002c54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200000d4 	.word	0x200000d4

0800126c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <TIM4_IRQHandler+0x10>)
 8001272:	f001 fcef 	bl	8002c54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000080 	.word	0x20000080

08001280 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <USART2_IRQHandler+0x28>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128e:	2b80      	cmp	r3, #128	; 0x80
 8001290:	d104      	bne.n	800129c <USART2_IRQHandler+0x1c>
	{
		__HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_TXE);
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <USART2_IRQHandler+0x28>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800129a:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <USART2_IRQHandler+0x28>)
 800129e:	f002 fe95 	bl	8003fcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200001d8 	.word	0x200001d8

080012ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <SystemInit+0x20>)
 80012b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <SystemInit+0x20>)
 80012b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001308 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012d4:	480d      	ldr	r0, [pc, #52]	; (800130c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012d6:	490e      	ldr	r1, [pc, #56]	; (8001310 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012d8:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012dc:	e002      	b.n	80012e4 <LoopCopyDataInit>

080012de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e2:	3304      	adds	r3, #4

080012e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e8:	d3f9      	bcc.n	80012de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ea:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012ec:	4c0b      	ldr	r4, [pc, #44]	; (800131c <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f0:	e001      	b.n	80012f6 <LoopFillZerobss>

080012f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f4:	3204      	adds	r2, #4

080012f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f8:	d3fb      	bcc.n	80012f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012fa:	f7ff ffd7 	bl	80012ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fe:	f004 f869 	bl	80053d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001302:	f7ff f8fb 	bl	80004fc <main>
  bx  lr    
 8001306:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800130c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001310:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001314:	08005514 	.word	0x08005514
  ldr r2, =_sbss
 8001318:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 800131c:	20000270 	.word	0x20000270

08001320 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001320:	e7fe      	b.n	8001320 <ADC_IRQHandler>
	...

08001324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <HAL_Init+0x40>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <HAL_Init+0x40>)
 800132e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001332:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_Init+0x40>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <HAL_Init+0x40>)
 800133a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800133e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_Init+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <HAL_Init+0x40>)
 8001346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134c:	2003      	movs	r0, #3
 800134e:	f000 f941 	bl	80015d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001352:	2000      	movs	r0, #0
 8001354:	f000 f808 	bl	8001368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001358:	f7ff fd72 	bl	8000e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023c00 	.word	0x40023c00

08001368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_InitTick+0x54>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_InitTick+0x58>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f95d 	bl	8001646 <HAL_SYSTICK_Config>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e00e      	b.n	80013b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d80a      	bhi.n	80013b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800139c:	2200      	movs	r2, #0
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013a4:	f000 f921 	bl	80015ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a8:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <HAL_InitTick+0x5c>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e000      	b.n	80013b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000000 	.word	0x20000000
 80013c0:	20000008 	.word	0x20000008
 80013c4:	20000004 	.word	0x20000004

080013c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x20>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x24>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_IncTick+0x24>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000008 	.word	0x20000008
 80013ec:	2000026c 	.word	0x2000026c

080013f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_GetTick+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	2000026c 	.word	0x2000026c

08001408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001424:	4013      	ands	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <__NVIC_GetPriorityGrouping+0x18>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	f003 0307 	and.w	r3, r3, #7
}
 800145e:	4618      	mov	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	db0b      	blt.n	8001496 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f003 021f 	and.w	r2, r3, #31
 8001484:	4907      	ldr	r1, [pc, #28]	; (80014a4 <__NVIC_EnableIRQ+0x38>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	095b      	lsrs	r3, r3, #5
 800148c:	2001      	movs	r0, #1
 800148e:	fa00 f202 	lsl.w	r2, r0, r2
 8001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000e100 	.word	0xe000e100

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db0a      	blt.n	80014d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	490c      	ldr	r1, [pc, #48]	; (80014f4 <__NVIC_SetPriority+0x4c>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d0:	e00a      	b.n	80014e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4908      	ldr	r1, [pc, #32]	; (80014f8 <__NVIC_SetPriority+0x50>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	3b04      	subs	r3, #4
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	761a      	strb	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0307 	rsb	r3, r3, #7
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf28      	it	cs
 800151a:	2304      	movcs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3304      	adds	r3, #4
 8001522:	2b06      	cmp	r3, #6
 8001524:	d902      	bls.n	800152c <NVIC_EncodePriority+0x30>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3b03      	subs	r3, #3
 800152a:	e000      	b.n	800152e <NVIC_EncodePriority+0x32>
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	4313      	orrs	r3, r2
         );
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	; 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <__NVIC_SystemReset+0x24>)
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001576:	4904      	ldr	r1, [pc, #16]	; (8001588 <__NVIC_SystemReset+0x24>)
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <__NVIC_SystemReset+0x28>)
 800157a:	4313      	orrs	r3, r2
 800157c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800157e:	f3bf 8f4f 	dsb	sy
}
 8001582:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <__NVIC_SystemReset+0x20>
 8001588:	e000ed00 	.word	0xe000ed00
 800158c:	05fa0004 	.word	0x05fa0004

08001590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a0:	d301      	bcc.n	80015a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a2:	2301      	movs	r3, #1
 80015a4:	e00f      	b.n	80015c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <SysTick_Config+0x40>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ae:	210f      	movs	r1, #15
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015b4:	f7ff ff78 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <SysTick_Config+0x40>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015be:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <SysTick_Config+0x40>)
 80015c0:	2207      	movs	r2, #7
 80015c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	e000e010 	.word	0xe000e010

080015d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ff13 	bl	8001408 <__NVIC_SetPriorityGrouping>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b086      	sub	sp, #24
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	60b9      	str	r1, [r7, #8]
 80015f4:	607a      	str	r2, [r7, #4]
 80015f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015fc:	f7ff ff28 	bl	8001450 <__NVIC_GetPriorityGrouping>
 8001600:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	68b9      	ldr	r1, [r7, #8]
 8001606:	6978      	ldr	r0, [r7, #20]
 8001608:	f7ff ff78 	bl	80014fc <NVIC_EncodePriority>
 800160c:	4602      	mov	r2, r0
 800160e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001612:	4611      	mov	r1, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff47 	bl	80014a8 <__NVIC_SetPriority>
}
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	4603      	mov	r3, r0
 800162a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800162c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff1b 	bl	800146c <__NVIC_EnableIRQ>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001642:	f7ff ff8f 	bl	8001564 <__NVIC_SystemReset>

08001646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ff9e 	bl	8001590 <SysTick_Config>
 8001654:	4603      	mov	r3, r0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b084      	sub	sp, #16
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff fec0 	bl	80013f0 <HAL_GetTick>
 8001670:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d008      	beq.n	8001690 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2280      	movs	r2, #128	; 0x80
 8001682:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e052      	b.n	8001736 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0216 	bic.w	r2, r2, #22
 800169e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d103      	bne.n	80016c0 <HAL_DMA_Abort+0x62>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d007      	beq.n	80016d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0208 	bic.w	r2, r2, #8
 80016ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0201 	bic.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e0:	e013      	b.n	800170a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016e2:	f7ff fe85 	bl	80013f0 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	d90c      	bls.n	800170a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2220      	movs	r2, #32
 80016f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2203      	movs	r2, #3
 80016fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e015      	b.n	8001736 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1e4      	bne.n	80016e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171c:	223f      	movs	r2, #63	; 0x3f
 800171e:	409a      	lsls	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d004      	beq.n	800175c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e00c      	b.n	8001776 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2205      	movs	r2, #5
 8001760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0201 	bic.w	r2, r2, #1
 8001772:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	; 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	e165      	b.n	8001a6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017a0:	2201      	movs	r2, #1
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	f040 8154 	bne.w	8001a66 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d005      	beq.n	80017d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d130      	bne.n	8001838 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800180c:	2201      	movs	r2, #1
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f003 0201 	and.w	r2, r3, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b03      	cmp	r3, #3
 8001842:	d017      	beq.n	8001874 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	2203      	movs	r2, #3
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d123      	bne.n	80018c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	08da      	lsrs	r2, r3, #3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3208      	adds	r2, #8
 8001888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	220f      	movs	r2, #15
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	08da      	lsrs	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3208      	adds	r2, #8
 80018c2:	69b9      	ldr	r1, [r7, #24]
 80018c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0203 	and.w	r2, r3, #3
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 80ae 	beq.w	8001a66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b5d      	ldr	r3, [pc, #372]	; (8001a84 <HAL_GPIO_Init+0x300>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	4a5c      	ldr	r2, [pc, #368]	; (8001a84 <HAL_GPIO_Init+0x300>)
 8001914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001918:	6453      	str	r3, [r2, #68]	; 0x44
 800191a:	4b5a      	ldr	r3, [pc, #360]	; (8001a84 <HAL_GPIO_Init+0x300>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001926:	4a58      	ldr	r2, [pc, #352]	; (8001a88 <HAL_GPIO_Init+0x304>)
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	3302      	adds	r3, #2
 800192e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	220f      	movs	r2, #15
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4f      	ldr	r2, [pc, #316]	; (8001a8c <HAL_GPIO_Init+0x308>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d025      	beq.n	800199e <HAL_GPIO_Init+0x21a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4e      	ldr	r2, [pc, #312]	; (8001a90 <HAL_GPIO_Init+0x30c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d01f      	beq.n	800199a <HAL_GPIO_Init+0x216>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4d      	ldr	r2, [pc, #308]	; (8001a94 <HAL_GPIO_Init+0x310>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d019      	beq.n	8001996 <HAL_GPIO_Init+0x212>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a4c      	ldr	r2, [pc, #304]	; (8001a98 <HAL_GPIO_Init+0x314>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d013      	beq.n	8001992 <HAL_GPIO_Init+0x20e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a4b      	ldr	r2, [pc, #300]	; (8001a9c <HAL_GPIO_Init+0x318>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d00d      	beq.n	800198e <HAL_GPIO_Init+0x20a>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a4a      	ldr	r2, [pc, #296]	; (8001aa0 <HAL_GPIO_Init+0x31c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d007      	beq.n	800198a <HAL_GPIO_Init+0x206>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a49      	ldr	r2, [pc, #292]	; (8001aa4 <HAL_GPIO_Init+0x320>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d101      	bne.n	8001986 <HAL_GPIO_Init+0x202>
 8001982:	2306      	movs	r3, #6
 8001984:	e00c      	b.n	80019a0 <HAL_GPIO_Init+0x21c>
 8001986:	2307      	movs	r3, #7
 8001988:	e00a      	b.n	80019a0 <HAL_GPIO_Init+0x21c>
 800198a:	2305      	movs	r3, #5
 800198c:	e008      	b.n	80019a0 <HAL_GPIO_Init+0x21c>
 800198e:	2304      	movs	r3, #4
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x21c>
 8001992:	2303      	movs	r3, #3
 8001994:	e004      	b.n	80019a0 <HAL_GPIO_Init+0x21c>
 8001996:	2302      	movs	r3, #2
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_Init+0x21c>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_GPIO_Init+0x21c>
 800199e:	2300      	movs	r3, #0
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	f002 0203 	and.w	r2, r2, #3
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	4093      	lsls	r3, r2
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b0:	4935      	ldr	r1, [pc, #212]	; (8001a88 <HAL_GPIO_Init+0x304>)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	089b      	lsrs	r3, r3, #2
 80019b6:	3302      	adds	r3, #2
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019be:	4b3a      	ldr	r3, [pc, #232]	; (8001aa8 <HAL_GPIO_Init+0x324>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019e2:	4a31      	ldr	r2, [pc, #196]	; (8001aa8 <HAL_GPIO_Init+0x324>)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019e8:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <HAL_GPIO_Init+0x324>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a0c:	4a26      	ldr	r2, [pc, #152]	; (8001aa8 <HAL_GPIO_Init+0x324>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a12:	4b25      	ldr	r3, [pc, #148]	; (8001aa8 <HAL_GPIO_Init+0x324>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a36:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <HAL_GPIO_Init+0x324>)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <HAL_GPIO_Init+0x324>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a60:	4a11      	ldr	r2, [pc, #68]	; (8001aa8 <HAL_GPIO_Init+0x324>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	61fb      	str	r3, [r7, #28]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	2b0f      	cmp	r3, #15
 8001a70:	f67f ae96 	bls.w	80017a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3724      	adds	r7, #36	; 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40013800 	.word	0x40013800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40020800 	.word	0x40020800
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40021400 	.word	0x40021400
 8001aa4:	40021800 	.word	0x40021800
 8001aa8:	40013c00 	.word	0x40013c00

08001aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001abc:	787b      	ldrb	r3, [r7, #1]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ac2:	887a      	ldrh	r2, [r7, #2]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ac8:	e003      	b.n	8001ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aca:	887b      	ldrh	r3, [r7, #2]
 8001acc:	041a      	lsls	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	619a      	str	r2, [r3, #24]
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0cc      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001af4:	4b68      	ldr	r3, [pc, #416]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d90c      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b65      	ldr	r3, [pc, #404]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b63      	ldr	r3, [pc, #396]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0b8      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d020      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b34:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a58      	ldr	r2, [pc, #352]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b4c:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	4a52      	ldr	r2, [pc, #328]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b58:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	494d      	ldr	r1, [pc, #308]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d044      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d119      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e07f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d003      	beq.n	8001b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9e:	4b3f      	ldr	r3, [pc, #252]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d109      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e06f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bae:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e067      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bbe:	4b37      	ldr	r3, [pc, #220]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f023 0203 	bic.w	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4934      	ldr	r1, [pc, #208]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd0:	f7ff fc0e 	bl	80013f0 <HAL_GetTick>
 8001bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd8:	f7ff fc0a 	bl	80013f0 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e04f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 020c 	and.w	r2, r3, #12
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d1eb      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c00:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d20c      	bcs.n	8001c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e032      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4916      	ldr	r1, [pc, #88]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d009      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	490e      	ldr	r1, [pc, #56]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c66:	f000 f855 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	490a      	ldr	r1, [pc, #40]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c78:	5ccb      	ldrb	r3, [r1, r3]
 8001c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7e:	4a09      	ldr	r2, [pc, #36]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fb6e 	bl	8001368 <HAL_InitTick>

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40023c00 	.word	0x40023c00
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	080054ec 	.word	0x080054ec
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000004 	.word	0x20000004

08001cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000000 	.word	0x20000000

08001cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cc8:	f7ff fff0 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	0a9b      	lsrs	r3, r3, #10
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	4903      	ldr	r1, [pc, #12]	; (8001ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cda:	5ccb      	ldrb	r3, [r1, r3]
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	080054fc 	.word	0x080054fc

08001cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cf0:	f7ff ffdc 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	0b5b      	lsrs	r3, r3, #13
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	4903      	ldr	r1, [pc, #12]	; (8001d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d02:	5ccb      	ldrb	r3, [r1, r3]
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	080054fc 	.word	0x080054fc

08001d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d18:	b088      	sub	sp, #32
 8001d1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d30:	4bce      	ldr	r3, [pc, #824]	; (800206c <HAL_RCC_GetSysClockFreq+0x358>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b0c      	cmp	r3, #12
 8001d3a:	f200 818d 	bhi.w	8002058 <HAL_RCC_GetSysClockFreq+0x344>
 8001d3e:	a201      	add	r2, pc, #4	; (adr r2, 8001d44 <HAL_RCC_GetSysClockFreq+0x30>)
 8001d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d44:	08001d79 	.word	0x08001d79
 8001d48:	08002059 	.word	0x08002059
 8001d4c:	08002059 	.word	0x08002059
 8001d50:	08002059 	.word	0x08002059
 8001d54:	08001d7f 	.word	0x08001d7f
 8001d58:	08002059 	.word	0x08002059
 8001d5c:	08002059 	.word	0x08002059
 8001d60:	08002059 	.word	0x08002059
 8001d64:	08001d85 	.word	0x08001d85
 8001d68:	08002059 	.word	0x08002059
 8001d6c:	08002059 	.word	0x08002059
 8001d70:	08002059 	.word	0x08002059
 8001d74:	08001ef9 	.word	0x08001ef9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d78:	4bbd      	ldr	r3, [pc, #756]	; (8002070 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d7a:	61bb      	str	r3, [r7, #24]
       break;
 8001d7c:	e16f      	b.n	800205e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d7e:	4bbd      	ldr	r3, [pc, #756]	; (8002074 <HAL_RCC_GetSysClockFreq+0x360>)
 8001d80:	61bb      	str	r3, [r7, #24]
      break;
 8001d82:	e16c      	b.n	800205e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d84:	4bb9      	ldr	r3, [pc, #740]	; (800206c <HAL_RCC_GetSysClockFreq+0x358>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d8c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d8e:	4bb7      	ldr	r3, [pc, #732]	; (800206c <HAL_RCC_GetSysClockFreq+0x358>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d053      	beq.n	8001e42 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d9a:	4bb4      	ldr	r3, [pc, #720]	; (800206c <HAL_RCC_GetSysClockFreq+0x358>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	099b      	lsrs	r3, r3, #6
 8001da0:	461a      	mov	r2, r3
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001daa:	f04f 0100 	mov.w	r1, #0
 8001dae:	ea02 0400 	and.w	r4, r2, r0
 8001db2:	603c      	str	r4, [r7, #0]
 8001db4:	400b      	ands	r3, r1
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	014b      	lsls	r3, r1, #5
 8001dca:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001dce:	0142      	lsls	r2, r0, #5
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4623      	mov	r3, r4
 8001dd6:	1ac0      	subs	r0, r0, r3
 8001dd8:	462b      	mov	r3, r5
 8001dda:	eb61 0103 	sbc.w	r1, r1, r3
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	018b      	lsls	r3, r1, #6
 8001de8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001dec:	0182      	lsls	r2, r0, #6
 8001dee:	1a12      	subs	r2, r2, r0
 8001df0:	eb63 0301 	sbc.w	r3, r3, r1
 8001df4:	f04f 0000 	mov.w	r0, #0
 8001df8:	f04f 0100 	mov.w	r1, #0
 8001dfc:	00d9      	lsls	r1, r3, #3
 8001dfe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e02:	00d0      	lsls	r0, r2, #3
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4621      	mov	r1, r4
 8001e0a:	1852      	adds	r2, r2, r1
 8001e0c:	4629      	mov	r1, r5
 8001e0e:	eb43 0101 	adc.w	r1, r3, r1
 8001e12:	460b      	mov	r3, r1
 8001e14:	f04f 0000 	mov.w	r0, #0
 8001e18:	f04f 0100 	mov.w	r1, #0
 8001e1c:	0259      	lsls	r1, r3, #9
 8001e1e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e22:	0250      	lsls	r0, r2, #9
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	f7fe f9e6 	bl	8000204 <__aeabi_uldivmod>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	61fb      	str	r3, [r7, #28]
 8001e40:	e04c      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e42:	4b8a      	ldr	r3, [pc, #552]	; (800206c <HAL_RCC_GetSysClockFreq+0x358>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	099b      	lsrs	r3, r3, #6
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e52:	f04f 0100 	mov.w	r1, #0
 8001e56:	ea02 0a00 	and.w	sl, r2, r0
 8001e5a:	ea03 0b01 	and.w	fp, r3, r1
 8001e5e:	4650      	mov	r0, sl
 8001e60:	4659      	mov	r1, fp
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	f04f 0300 	mov.w	r3, #0
 8001e6a:	014b      	lsls	r3, r1, #5
 8001e6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e70:	0142      	lsls	r2, r0, #5
 8001e72:	4610      	mov	r0, r2
 8001e74:	4619      	mov	r1, r3
 8001e76:	ebb0 000a 	subs.w	r0, r0, sl
 8001e7a:	eb61 010b 	sbc.w	r1, r1, fp
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	018b      	lsls	r3, r1, #6
 8001e88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e8c:	0182      	lsls	r2, r0, #6
 8001e8e:	1a12      	subs	r2, r2, r0
 8001e90:	eb63 0301 	sbc.w	r3, r3, r1
 8001e94:	f04f 0000 	mov.w	r0, #0
 8001e98:	f04f 0100 	mov.w	r1, #0
 8001e9c:	00d9      	lsls	r1, r3, #3
 8001e9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ea2:	00d0      	lsls	r0, r2, #3
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	eb12 020a 	adds.w	r2, r2, sl
 8001eac:	eb43 030b 	adc.w	r3, r3, fp
 8001eb0:	f04f 0000 	mov.w	r0, #0
 8001eb4:	f04f 0100 	mov.w	r1, #0
 8001eb8:	0299      	lsls	r1, r3, #10
 8001eba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ebe:	0290      	lsls	r0, r2, #10
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	f7fe f998 	bl	8000204 <__aeabi_uldivmod>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4613      	mov	r3, r2
 8001eda:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001edc:	4b63      	ldr	r3, [pc, #396]	; (800206c <HAL_RCC_GetSysClockFreq+0x358>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	0c1b      	lsrs	r3, r3, #16
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001eec:	69fa      	ldr	r2, [r7, #28]
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef4:	61bb      	str	r3, [r7, #24]
      break;
 8001ef6:	e0b2      	b.n	800205e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ef8:	4b5c      	ldr	r3, [pc, #368]	; (800206c <HAL_RCC_GetSysClockFreq+0x358>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f00:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f02:	4b5a      	ldr	r3, [pc, #360]	; (800206c <HAL_RCC_GetSysClockFreq+0x358>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d04d      	beq.n	8001faa <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f0e:	4b57      	ldr	r3, [pc, #348]	; (800206c <HAL_RCC_GetSysClockFreq+0x358>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	099b      	lsrs	r3, r3, #6
 8001f14:	461a      	mov	r2, r3
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f1e:	f04f 0100 	mov.w	r1, #0
 8001f22:	ea02 0800 	and.w	r8, r2, r0
 8001f26:	ea03 0901 	and.w	r9, r3, r1
 8001f2a:	4640      	mov	r0, r8
 8001f2c:	4649      	mov	r1, r9
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	014b      	lsls	r3, r1, #5
 8001f38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f3c:	0142      	lsls	r2, r0, #5
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	ebb0 0008 	subs.w	r0, r0, r8
 8001f46:	eb61 0109 	sbc.w	r1, r1, r9
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	018b      	lsls	r3, r1, #6
 8001f54:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f58:	0182      	lsls	r2, r0, #6
 8001f5a:	1a12      	subs	r2, r2, r0
 8001f5c:	eb63 0301 	sbc.w	r3, r3, r1
 8001f60:	f04f 0000 	mov.w	r0, #0
 8001f64:	f04f 0100 	mov.w	r1, #0
 8001f68:	00d9      	lsls	r1, r3, #3
 8001f6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f6e:	00d0      	lsls	r0, r2, #3
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	eb12 0208 	adds.w	r2, r2, r8
 8001f78:	eb43 0309 	adc.w	r3, r3, r9
 8001f7c:	f04f 0000 	mov.w	r0, #0
 8001f80:	f04f 0100 	mov.w	r1, #0
 8001f84:	0259      	lsls	r1, r3, #9
 8001f86:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001f8a:	0250      	lsls	r0, r2, #9
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	461a      	mov	r2, r3
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	f7fe f932 	bl	8000204 <__aeabi_uldivmod>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	61fb      	str	r3, [r7, #28]
 8001fa8:	e04a      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001faa:	4b30      	ldr	r3, [pc, #192]	; (800206c <HAL_RCC_GetSysClockFreq+0x358>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	099b      	lsrs	r3, r3, #6
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fba:	f04f 0100 	mov.w	r1, #0
 8001fbe:	ea02 0400 	and.w	r4, r2, r0
 8001fc2:	ea03 0501 	and.w	r5, r3, r1
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	4629      	mov	r1, r5
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	014b      	lsls	r3, r1, #5
 8001fd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fd8:	0142      	lsls	r2, r0, #5
 8001fda:	4610      	mov	r0, r2
 8001fdc:	4619      	mov	r1, r3
 8001fde:	1b00      	subs	r0, r0, r4
 8001fe0:	eb61 0105 	sbc.w	r1, r1, r5
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	f04f 0300 	mov.w	r3, #0
 8001fec:	018b      	lsls	r3, r1, #6
 8001fee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ff2:	0182      	lsls	r2, r0, #6
 8001ff4:	1a12      	subs	r2, r2, r0
 8001ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8001ffa:	f04f 0000 	mov.w	r0, #0
 8001ffe:	f04f 0100 	mov.w	r1, #0
 8002002:	00d9      	lsls	r1, r3, #3
 8002004:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002008:	00d0      	lsls	r0, r2, #3
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	1912      	adds	r2, r2, r4
 8002010:	eb45 0303 	adc.w	r3, r5, r3
 8002014:	f04f 0000 	mov.w	r0, #0
 8002018:	f04f 0100 	mov.w	r1, #0
 800201c:	0299      	lsls	r1, r3, #10
 800201e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002022:	0290      	lsls	r0, r2, #10
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	461a      	mov	r2, r3
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	f7fe f8e6 	bl	8000204 <__aeabi_uldivmod>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4613      	mov	r3, r2
 800203e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002040:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_RCC_GetSysClockFreq+0x358>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	0f1b      	lsrs	r3, r3, #28
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800204c:	69fa      	ldr	r2, [r7, #28]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	fbb2 f3f3 	udiv	r3, r2, r3
 8002054:	61bb      	str	r3, [r7, #24]
      break;
 8002056:	e002      	b.n	800205e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_RCC_GetSysClockFreq+0x35c>)
 800205a:	61bb      	str	r3, [r7, #24]
      break;
 800205c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800205e:	69bb      	ldr	r3, [r7, #24]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3720      	adds	r7, #32
 8002064:	46bd      	mov	sp, r7
 8002066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800
 8002070:	00f42400 	.word	0x00f42400
 8002074:	007a1200 	.word	0x007a1200

08002078 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e28d      	b.n	80025a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 8083 	beq.w	800219e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002098:	4b94      	ldr	r3, [pc, #592]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d019      	beq.n	80020d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020a4:	4b91      	ldr	r3, [pc, #580]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d106      	bne.n	80020be <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020b0:	4b8e      	ldr	r3, [pc, #568]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020bc:	d00c      	beq.n	80020d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020be:	4b8b      	ldr	r3, [pc, #556]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020c6:	2b0c      	cmp	r3, #12
 80020c8:	d112      	bne.n	80020f0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ca:	4b88      	ldr	r3, [pc, #544]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020d6:	d10b      	bne.n	80020f0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d8:	4b84      	ldr	r3, [pc, #528]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d05b      	beq.n	800219c <HAL_RCC_OscConfig+0x124>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d157      	bne.n	800219c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e25a      	b.n	80025a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f8:	d106      	bne.n	8002108 <HAL_RCC_OscConfig+0x90>
 80020fa:	4b7c      	ldr	r3, [pc, #496]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a7b      	ldr	r2, [pc, #492]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 8002100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e01d      	b.n	8002144 <HAL_RCC_OscConfig+0xcc>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0xb4>
 8002112:	4b76      	ldr	r3, [pc, #472]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a75      	ldr	r2, [pc, #468]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 8002118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b73      	ldr	r3, [pc, #460]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a72      	ldr	r2, [pc, #456]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e00b      	b.n	8002144 <HAL_RCC_OscConfig+0xcc>
 800212c:	4b6f      	ldr	r3, [pc, #444]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a6e      	ldr	r2, [pc, #440]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 8002132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	4b6c      	ldr	r3, [pc, #432]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a6b      	ldr	r2, [pc, #428]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 800213e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d013      	beq.n	8002174 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7ff f950 	bl	80013f0 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002154:	f7ff f94c 	bl	80013f0 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b64      	cmp	r3, #100	; 0x64
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e21f      	b.n	80025a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002166:	4b61      	ldr	r3, [pc, #388]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0xdc>
 8002172:	e014      	b.n	800219e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7ff f93c 	bl	80013f0 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800217c:	f7ff f938 	bl	80013f0 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	; 0x64
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e20b      	b.n	80025a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218e:	4b57      	ldr	r3, [pc, #348]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x104>
 800219a:	e000      	b.n	800219e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d06f      	beq.n	800228a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021aa:	4b50      	ldr	r3, [pc, #320]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d017      	beq.n	80021e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021b6:	4b4d      	ldr	r3, [pc, #308]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d105      	bne.n	80021ce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021c2:	4b4a      	ldr	r3, [pc, #296]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ce:	4b47      	ldr	r3, [pc, #284]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021d6:	2b0c      	cmp	r3, #12
 80021d8:	d11c      	bne.n	8002214 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021da:	4b44      	ldr	r3, [pc, #272]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d116      	bne.n	8002214 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	4b41      	ldr	r3, [pc, #260]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d005      	beq.n	80021fe <HAL_RCC_OscConfig+0x186>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e1d3      	b.n	80025a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fe:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4937      	ldr	r1, [pc, #220]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002212:	e03a      	b.n	800228a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d020      	beq.n	800225e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800221c:	4b34      	ldr	r3, [pc, #208]	; (80022f0 <HAL_RCC_OscConfig+0x278>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002222:	f7ff f8e5 	bl	80013f0 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800222a:	f7ff f8e1 	bl	80013f0 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e1b4      	b.n	80025a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223c:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002248:	4b28      	ldr	r3, [pc, #160]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4925      	ldr	r1, [pc, #148]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 8002258:	4313      	orrs	r3, r2
 800225a:	600b      	str	r3, [r1, #0]
 800225c:	e015      	b.n	800228a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800225e:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <HAL_RCC_OscConfig+0x278>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7ff f8c4 	bl	80013f0 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800226c:	f7ff f8c0 	bl	80013f0 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e193      	b.n	80025a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227e:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d036      	beq.n	8002304 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d016      	beq.n	80022cc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <HAL_RCC_OscConfig+0x27c>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7ff f8a4 	bl	80013f0 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ac:	f7ff f8a0 	bl	80013f0 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e173      	b.n	80025a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_RCC_OscConfig+0x274>)
 80022c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x234>
 80022ca:	e01b      	b.n	8002304 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <HAL_RCC_OscConfig+0x27c>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d2:	f7ff f88d 	bl	80013f0 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d8:	e00e      	b.n	80022f8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022da:	f7ff f889 	bl	80013f0 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d907      	bls.n	80022f8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e15c      	b.n	80025a6 <HAL_RCC_OscConfig+0x52e>
 80022ec:	40023800 	.word	0x40023800
 80022f0:	42470000 	.word	0x42470000
 80022f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f8:	4b8a      	ldr	r3, [pc, #552]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 80022fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ea      	bne.n	80022da <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 8097 	beq.w	8002440 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002316:	4b83      	ldr	r3, [pc, #524]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10f      	bne.n	8002342 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	4b7f      	ldr	r3, [pc, #508]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	4a7e      	ldr	r2, [pc, #504]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 800232c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002330:	6413      	str	r3, [r2, #64]	; 0x40
 8002332:	4b7c      	ldr	r3, [pc, #496]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233e:	2301      	movs	r3, #1
 8002340:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002342:	4b79      	ldr	r3, [pc, #484]	; (8002528 <HAL_RCC_OscConfig+0x4b0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234a:	2b00      	cmp	r3, #0
 800234c:	d118      	bne.n	8002380 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800234e:	4b76      	ldr	r3, [pc, #472]	; (8002528 <HAL_RCC_OscConfig+0x4b0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a75      	ldr	r2, [pc, #468]	; (8002528 <HAL_RCC_OscConfig+0x4b0>)
 8002354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235a:	f7ff f849 	bl	80013f0 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002362:	f7ff f845 	bl	80013f0 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e118      	b.n	80025a6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002374:	4b6c      	ldr	r3, [pc, #432]	; (8002528 <HAL_RCC_OscConfig+0x4b0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d106      	bne.n	8002396 <HAL_RCC_OscConfig+0x31e>
 8002388:	4b66      	ldr	r3, [pc, #408]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 800238a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238c:	4a65      	ldr	r2, [pc, #404]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6713      	str	r3, [r2, #112]	; 0x70
 8002394:	e01c      	b.n	80023d0 <HAL_RCC_OscConfig+0x358>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b05      	cmp	r3, #5
 800239c:	d10c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x340>
 800239e:	4b61      	ldr	r3, [pc, #388]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a2:	4a60      	ldr	r2, [pc, #384]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	6713      	str	r3, [r2, #112]	; 0x70
 80023aa:	4b5e      	ldr	r3, [pc, #376]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 80023ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ae:	4a5d      	ldr	r2, [pc, #372]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6713      	str	r3, [r2, #112]	; 0x70
 80023b6:	e00b      	b.n	80023d0 <HAL_RCC_OscConfig+0x358>
 80023b8:	4b5a      	ldr	r3, [pc, #360]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	4a59      	ldr	r2, [pc, #356]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	6713      	str	r3, [r2, #112]	; 0x70
 80023c4:	4b57      	ldr	r3, [pc, #348]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	4a56      	ldr	r2, [pc, #344]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 80023ca:	f023 0304 	bic.w	r3, r3, #4
 80023ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d015      	beq.n	8002404 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d8:	f7ff f80a 	bl	80013f0 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023de:	e00a      	b.n	80023f6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e0:	f7ff f806 	bl	80013f0 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e0d7      	b.n	80025a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f6:	4b4b      	ldr	r3, [pc, #300]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0ee      	beq.n	80023e0 <HAL_RCC_OscConfig+0x368>
 8002402:	e014      	b.n	800242e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002404:	f7fe fff4 	bl	80013f0 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240a:	e00a      	b.n	8002422 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800240c:	f7fe fff0 	bl	80013f0 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	; 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e0c1      	b.n	80025a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002422:	4b40      	ldr	r3, [pc, #256]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1ee      	bne.n	800240c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800242e:	7dfb      	ldrb	r3, [r7, #23]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d105      	bne.n	8002440 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002434:	4b3b      	ldr	r3, [pc, #236]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	4a3a      	ldr	r2, [pc, #232]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 800243a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80ad 	beq.w	80025a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800244a:	4b36      	ldr	r3, [pc, #216]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b08      	cmp	r3, #8
 8002454:	d060      	beq.n	8002518 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d145      	bne.n	80024ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245e:	4b33      	ldr	r3, [pc, #204]	; (800252c <HAL_RCC_OscConfig+0x4b4>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe ffc4 	bl	80013f0 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246c:	f7fe ffc0 	bl	80013f0 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e093      	b.n	80025a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	4b29      	ldr	r3, [pc, #164]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	019b      	lsls	r3, r3, #6
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	085b      	lsrs	r3, r3, #1
 80024a2:	3b01      	subs	r3, #1
 80024a4:	041b      	lsls	r3, r3, #16
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	061b      	lsls	r3, r3, #24
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	071b      	lsls	r3, r3, #28
 80024b6:	491b      	ldr	r1, [pc, #108]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024bc:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_RCC_OscConfig+0x4b4>)
 80024be:	2201      	movs	r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c2:	f7fe ff95 	bl	80013f0 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ca:	f7fe ff91 	bl	80013f0 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e064      	b.n	80025a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCC_OscConfig+0x452>
 80024e8:	e05c      	b.n	80025a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <HAL_RCC_OscConfig+0x4b4>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe ff7e 	bl	80013f0 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f8:	f7fe ff7a 	bl	80013f0 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e04d      	b.n	80025a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_RCC_OscConfig+0x4ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x480>
 8002516:	e045      	b.n	80025a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d107      	bne.n	8002530 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e040      	b.n	80025a6 <HAL_RCC_OscConfig+0x52e>
 8002524:	40023800 	.word	0x40023800
 8002528:	40007000 	.word	0x40007000
 800252c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002530:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <HAL_RCC_OscConfig+0x538>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d030      	beq.n	80025a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d129      	bne.n	80025a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d122      	bne.n	80025a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002560:	4013      	ands	r3, r2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002566:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002568:	4293      	cmp	r3, r2
 800256a:	d119      	bne.n	80025a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	3b01      	subs	r3, #1
 800257a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d10f      	bne.n	80025a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d107      	bne.n	80025a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800

080025b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e041      	b.n	800264a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fe fc58 	bl	8000e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3304      	adds	r3, #4
 80025f0:	4619      	mov	r1, r3
 80025f2:	4610      	mov	r0, r2
 80025f4:	f000 febe 	bl	8003374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	d001      	beq.n	800266c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e04e      	b.n	800270a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a23      	ldr	r2, [pc, #140]	; (8002718 <HAL_TIM_Base_Start_IT+0xc4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d022      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x80>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002696:	d01d      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x80>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a1f      	ldr	r2, [pc, #124]	; (800271c <HAL_TIM_Base_Start_IT+0xc8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d018      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x80>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1e      	ldr	r2, [pc, #120]	; (8002720 <HAL_TIM_Base_Start_IT+0xcc>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d013      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x80>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <HAL_TIM_Base_Start_IT+0xd0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00e      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x80>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1b      	ldr	r2, [pc, #108]	; (8002728 <HAL_TIM_Base_Start_IT+0xd4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d009      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x80>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a19      	ldr	r2, [pc, #100]	; (800272c <HAL_TIM_Base_Start_IT+0xd8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d004      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x80>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a18      	ldr	r2, [pc, #96]	; (8002730 <HAL_TIM_Base_Start_IT+0xdc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d111      	bne.n	80026f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b06      	cmp	r3, #6
 80026e4:	d010      	beq.n	8002708 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f042 0201 	orr.w	r2, r2, #1
 80026f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f6:	e007      	b.n	8002708 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40010000 	.word	0x40010000
 800271c:	40000400 	.word	0x40000400
 8002720:	40000800 	.word	0x40000800
 8002724:	40000c00 	.word	0x40000c00
 8002728:	40010400 	.word	0x40010400
 800272c:	40014000 	.word	0x40014000
 8002730:	40001800 	.word	0x40001800

08002734 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e041      	b.n	80027ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7fe fbd6 	bl	8000f0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3304      	adds	r3, #4
 8002770:	4619      	mov	r1, r3
 8002772:	4610      	mov	r0, r2
 8002774:	f000 fdfe 	bl	8003374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d109      	bne.n	80027f8 <HAL_TIM_PWM_Start+0x24>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	bf14      	ite	ne
 80027f0:	2301      	movne	r3, #1
 80027f2:	2300      	moveq	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	e022      	b.n	800283e <HAL_TIM_PWM_Start+0x6a>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d109      	bne.n	8002812 <HAL_TIM_PWM_Start+0x3e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	bf14      	ite	ne
 800280a:	2301      	movne	r3, #1
 800280c:	2300      	moveq	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	e015      	b.n	800283e <HAL_TIM_PWM_Start+0x6a>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b08      	cmp	r3, #8
 8002816:	d109      	bne.n	800282c <HAL_TIM_PWM_Start+0x58>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b01      	cmp	r3, #1
 8002822:	bf14      	ite	ne
 8002824:	2301      	movne	r3, #1
 8002826:	2300      	moveq	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	e008      	b.n	800283e <HAL_TIM_PWM_Start+0x6a>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b01      	cmp	r3, #1
 8002836:	bf14      	ite	ne
 8002838:	2301      	movne	r3, #1
 800283a:	2300      	moveq	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e07c      	b.n	8002940 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d104      	bne.n	8002856 <HAL_TIM_PWM_Start+0x82>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002854:	e013      	b.n	800287e <HAL_TIM_PWM_Start+0xaa>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b04      	cmp	r3, #4
 800285a:	d104      	bne.n	8002866 <HAL_TIM_PWM_Start+0x92>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002864:	e00b      	b.n	800287e <HAL_TIM_PWM_Start+0xaa>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b08      	cmp	r3, #8
 800286a:	d104      	bne.n	8002876 <HAL_TIM_PWM_Start+0xa2>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002874:	e003      	b.n	800287e <HAL_TIM_PWM_Start+0xaa>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2202      	movs	r2, #2
 800287a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2201      	movs	r2, #1
 8002884:	6839      	ldr	r1, [r7, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f001 f988 	bl	8003b9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a2d      	ldr	r2, [pc, #180]	; (8002948 <HAL_TIM_PWM_Start+0x174>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d004      	beq.n	80028a0 <HAL_TIM_PWM_Start+0xcc>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a2c      	ldr	r2, [pc, #176]	; (800294c <HAL_TIM_PWM_Start+0x178>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d101      	bne.n	80028a4 <HAL_TIM_PWM_Start+0xd0>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <HAL_TIM_PWM_Start+0xd2>
 80028a4:	2300      	movs	r3, #0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a22      	ldr	r2, [pc, #136]	; (8002948 <HAL_TIM_PWM_Start+0x174>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d022      	beq.n	800290a <HAL_TIM_PWM_Start+0x136>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028cc:	d01d      	beq.n	800290a <HAL_TIM_PWM_Start+0x136>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a1f      	ldr	r2, [pc, #124]	; (8002950 <HAL_TIM_PWM_Start+0x17c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d018      	beq.n	800290a <HAL_TIM_PWM_Start+0x136>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <HAL_TIM_PWM_Start+0x180>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d013      	beq.n	800290a <HAL_TIM_PWM_Start+0x136>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <HAL_TIM_PWM_Start+0x184>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d00e      	beq.n	800290a <HAL_TIM_PWM_Start+0x136>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a16      	ldr	r2, [pc, #88]	; (800294c <HAL_TIM_PWM_Start+0x178>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d009      	beq.n	800290a <HAL_TIM_PWM_Start+0x136>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a18      	ldr	r2, [pc, #96]	; (800295c <HAL_TIM_PWM_Start+0x188>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d004      	beq.n	800290a <HAL_TIM_PWM_Start+0x136>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a16      	ldr	r2, [pc, #88]	; (8002960 <HAL_TIM_PWM_Start+0x18c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d111      	bne.n	800292e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b06      	cmp	r3, #6
 800291a:	d010      	beq.n	800293e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292c:	e007      	b.n	800293e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40010000 	.word	0x40010000
 800294c:	40010400 	.word	0x40010400
 8002950:	40000400 	.word	0x40000400
 8002954:	40000800 	.word	0x40000800
 8002958:	40000c00 	.word	0x40000c00
 800295c:	40014000 	.word	0x40014000
 8002960:	40001800 	.word	0x40001800

08002964 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e041      	b.n	80029fa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe faf4 	bl	8000f78 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3304      	adds	r3, #4
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f000 fce6 	bl	8003374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d104      	bne.n	8002a22 <HAL_TIM_IC_Start_IT+0x1e>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	e013      	b.n	8002a4a <HAL_TIM_IC_Start_IT+0x46>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d104      	bne.n	8002a32 <HAL_TIM_IC_Start_IT+0x2e>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	e00b      	b.n	8002a4a <HAL_TIM_IC_Start_IT+0x46>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d104      	bne.n	8002a42 <HAL_TIM_IC_Start_IT+0x3e>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	e003      	b.n	8002a4a <HAL_TIM_IC_Start_IT+0x46>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d104      	bne.n	8002a5c <HAL_TIM_IC_Start_IT+0x58>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	e013      	b.n	8002a84 <HAL_TIM_IC_Start_IT+0x80>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d104      	bne.n	8002a6c <HAL_TIM_IC_Start_IT+0x68>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	e00b      	b.n	8002a84 <HAL_TIM_IC_Start_IT+0x80>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d104      	bne.n	8002a7c <HAL_TIM_IC_Start_IT+0x78>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	e003      	b.n	8002a84 <HAL_TIM_IC_Start_IT+0x80>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a86:	7bbb      	ldrb	r3, [r7, #14]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d102      	bne.n	8002a92 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a8c:	7b7b      	ldrb	r3, [r7, #13]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d001      	beq.n	8002a96 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e0cc      	b.n	8002c30 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d104      	bne.n	8002aa6 <HAL_TIM_IC_Start_IT+0xa2>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aa4:	e013      	b.n	8002ace <HAL_TIM_IC_Start_IT+0xca>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d104      	bne.n	8002ab6 <HAL_TIM_IC_Start_IT+0xb2>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab4:	e00b      	b.n	8002ace <HAL_TIM_IC_Start_IT+0xca>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d104      	bne.n	8002ac6 <HAL_TIM_IC_Start_IT+0xc2>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ac4:	e003      	b.n	8002ace <HAL_TIM_IC_Start_IT+0xca>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d104      	bne.n	8002ade <HAL_TIM_IC_Start_IT+0xda>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002adc:	e013      	b.n	8002b06 <HAL_TIM_IC_Start_IT+0x102>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d104      	bne.n	8002aee <HAL_TIM_IC_Start_IT+0xea>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aec:	e00b      	b.n	8002b06 <HAL_TIM_IC_Start_IT+0x102>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d104      	bne.n	8002afe <HAL_TIM_IC_Start_IT+0xfa>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002afc:	e003      	b.n	8002b06 <HAL_TIM_IC_Start_IT+0x102>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2202      	movs	r2, #2
 8002b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b0c      	cmp	r3, #12
 8002b0a:	d841      	bhi.n	8002b90 <HAL_TIM_IC_Start_IT+0x18c>
 8002b0c:	a201      	add	r2, pc, #4	; (adr r2, 8002b14 <HAL_TIM_IC_Start_IT+0x110>)
 8002b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b12:	bf00      	nop
 8002b14:	08002b49 	.word	0x08002b49
 8002b18:	08002b91 	.word	0x08002b91
 8002b1c:	08002b91 	.word	0x08002b91
 8002b20:	08002b91 	.word	0x08002b91
 8002b24:	08002b5b 	.word	0x08002b5b
 8002b28:	08002b91 	.word	0x08002b91
 8002b2c:	08002b91 	.word	0x08002b91
 8002b30:	08002b91 	.word	0x08002b91
 8002b34:	08002b6d 	.word	0x08002b6d
 8002b38:	08002b91 	.word	0x08002b91
 8002b3c:	08002b91 	.word	0x08002b91
 8002b40:	08002b91 	.word	0x08002b91
 8002b44:	08002b7f 	.word	0x08002b7f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0202 	orr.w	r2, r2, #2
 8002b56:	60da      	str	r2, [r3, #12]
      break;
 8002b58:	e01d      	b.n	8002b96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0204 	orr.w	r2, r2, #4
 8002b68:	60da      	str	r2, [r3, #12]
      break;
 8002b6a:	e014      	b.n	8002b96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0208 	orr.w	r2, r2, #8
 8002b7a:	60da      	str	r2, [r3, #12]
      break;
 8002b7c:	e00b      	b.n	8002b96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 0210 	orr.w	r2, r2, #16
 8002b8c:	60da      	str	r2, [r3, #12]
      break;
 8002b8e:	e002      	b.n	8002b96 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
      break;
 8002b94:	bf00      	nop
  }

  if (status == HAL_OK)
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d148      	bne.n	8002c2e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	6839      	ldr	r1, [r7, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 fff9 	bl	8003b9c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a22      	ldr	r2, [pc, #136]	; (8002c38 <HAL_TIM_IC_Start_IT+0x234>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d022      	beq.n	8002bfa <HAL_TIM_IC_Start_IT+0x1f6>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bbc:	d01d      	beq.n	8002bfa <HAL_TIM_IC_Start_IT+0x1f6>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1e      	ldr	r2, [pc, #120]	; (8002c3c <HAL_TIM_IC_Start_IT+0x238>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d018      	beq.n	8002bfa <HAL_TIM_IC_Start_IT+0x1f6>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1c      	ldr	r2, [pc, #112]	; (8002c40 <HAL_TIM_IC_Start_IT+0x23c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d013      	beq.n	8002bfa <HAL_TIM_IC_Start_IT+0x1f6>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1b      	ldr	r2, [pc, #108]	; (8002c44 <HAL_TIM_IC_Start_IT+0x240>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00e      	beq.n	8002bfa <HAL_TIM_IC_Start_IT+0x1f6>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a19      	ldr	r2, [pc, #100]	; (8002c48 <HAL_TIM_IC_Start_IT+0x244>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d009      	beq.n	8002bfa <HAL_TIM_IC_Start_IT+0x1f6>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a18      	ldr	r2, [pc, #96]	; (8002c4c <HAL_TIM_IC_Start_IT+0x248>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d004      	beq.n	8002bfa <HAL_TIM_IC_Start_IT+0x1f6>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a16      	ldr	r2, [pc, #88]	; (8002c50 <HAL_TIM_IC_Start_IT+0x24c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d111      	bne.n	8002c1e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b06      	cmp	r3, #6
 8002c0a:	d010      	beq.n	8002c2e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1c:	e007      	b.n	8002c2e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0201 	orr.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40010000 	.word	0x40010000
 8002c3c:	40000400 	.word	0x40000400
 8002c40:	40000800 	.word	0x40000800
 8002c44:	40000c00 	.word	0x40000c00
 8002c48:	40010400 	.word	0x40010400
 8002c4c:	40014000 	.word	0x40014000
 8002c50:	40001800 	.word	0x40001800

08002c54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d122      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d11b      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0202 	mvn.w	r2, #2
 8002c80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fe f864 	bl	8000d64 <HAL_TIM_IC_CaptureCallback>
 8002c9c:	e005      	b.n	8002caa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 fb4a 	bl	8003338 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fb51 	bl	800334c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d122      	bne.n	8002d04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d11b      	bne.n	8002d04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0204 	mvn.w	r2, #4
 8002cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fe f83a 	bl	8000d64 <HAL_TIM_IC_CaptureCallback>
 8002cf0:	e005      	b.n	8002cfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fb20 	bl	8003338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 fb27 	bl	800334c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d122      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d11b      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0208 	mvn.w	r2, #8
 8002d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fe f810 	bl	8000d64 <HAL_TIM_IC_CaptureCallback>
 8002d44:	e005      	b.n	8002d52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 faf6 	bl	8003338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fafd 	bl	800334c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	2b10      	cmp	r3, #16
 8002d64:	d122      	bne.n	8002dac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	2b10      	cmp	r3, #16
 8002d72:	d11b      	bne.n	8002dac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0210 	mvn.w	r2, #16
 8002d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2208      	movs	r2, #8
 8002d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fd ffe6 	bl	8000d64 <HAL_TIM_IC_CaptureCallback>
 8002d98:	e005      	b.n	8002da6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 facc 	bl	8003338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fad3 	bl	800334c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d10e      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d107      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0201 	mvn.w	r2, #1
 8002dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7fd ff58 	bl	8000c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de2:	2b80      	cmp	r3, #128	; 0x80
 8002de4:	d10e      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df0:	2b80      	cmp	r3, #128	; 0x80
 8002df2:	d107      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 ffca 	bl	8003d98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0e:	2b40      	cmp	r3, #64	; 0x40
 8002e10:	d10e      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1c:	2b40      	cmp	r3, #64	; 0x40
 8002e1e:	d107      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fa98 	bl	8003360 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	d10e      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d107      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0220 	mvn.w	r2, #32
 8002e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 ff94 	bl	8003d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e088      	b.n	8002f94 <HAL_TIM_IC_ConfigChannel+0x130>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d11b      	bne.n	8002ec8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	6819      	ldr	r1, [r3, #0]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f000 fcb8 	bl	8003814 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 020c 	bic.w	r2, r2, #12
 8002eb2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6999      	ldr	r1, [r3, #24]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	619a      	str	r2, [r3, #24]
 8002ec6:	e060      	b.n	8002f8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d11c      	bne.n	8002f08 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	6819      	ldr	r1, [r3, #0]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f000 fd3c 	bl	800395a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699a      	ldr	r2, [r3, #24]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002ef0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6999      	ldr	r1, [r3, #24]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	021a      	lsls	r2, r3, #8
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	619a      	str	r2, [r3, #24]
 8002f06:	e040      	b.n	8002f8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d11b      	bne.n	8002f46 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	6819      	ldr	r1, [r3, #0]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f000 fd89 	bl	8003a34 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 020c 	bic.w	r2, r2, #12
 8002f30:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69d9      	ldr	r1, [r3, #28]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	61da      	str	r2, [r3, #28]
 8002f44:	e021      	b.n	8002f8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b0c      	cmp	r3, #12
 8002f4a:	d11c      	bne.n	8002f86 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	6819      	ldr	r1, [r3, #0]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f000 fda6 	bl	8003aac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	69da      	ldr	r2, [r3, #28]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002f6e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	69d9      	ldr	r1, [r3, #28]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	021a      	lsls	r2, r3, #8
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	61da      	str	r2, [r3, #28]
 8002f84:	e001      	b.n	8002f8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e0ae      	b.n	8003118 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b0c      	cmp	r3, #12
 8002fc6:	f200 809f 	bhi.w	8003108 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002fca:	a201      	add	r2, pc, #4	; (adr r2, 8002fd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd0:	08003005 	.word	0x08003005
 8002fd4:	08003109 	.word	0x08003109
 8002fd8:	08003109 	.word	0x08003109
 8002fdc:	08003109 	.word	0x08003109
 8002fe0:	08003045 	.word	0x08003045
 8002fe4:	08003109 	.word	0x08003109
 8002fe8:	08003109 	.word	0x08003109
 8002fec:	08003109 	.word	0x08003109
 8002ff0:	08003087 	.word	0x08003087
 8002ff4:	08003109 	.word	0x08003109
 8002ff8:	08003109 	.word	0x08003109
 8002ffc:	08003109 	.word	0x08003109
 8003000:	080030c7 	.word	0x080030c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	4618      	mov	r0, r3
 800300c:	f000 fa52 	bl	80034b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0208 	orr.w	r2, r2, #8
 800301e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0204 	bic.w	r2, r2, #4
 800302e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6999      	ldr	r1, [r3, #24]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	619a      	str	r2, [r3, #24]
      break;
 8003042:	e064      	b.n	800310e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68b9      	ldr	r1, [r7, #8]
 800304a:	4618      	mov	r0, r3
 800304c:	f000 faa2 	bl	8003594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699a      	ldr	r2, [r3, #24]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800305e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699a      	ldr	r2, [r3, #24]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800306e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6999      	ldr	r1, [r3, #24]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	021a      	lsls	r2, r3, #8
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	619a      	str	r2, [r3, #24]
      break;
 8003084:	e043      	b.n	800310e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	4618      	mov	r0, r3
 800308e:	f000 faf7 	bl	8003680 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69da      	ldr	r2, [r3, #28]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0208 	orr.w	r2, r2, #8
 80030a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69da      	ldr	r2, [r3, #28]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0204 	bic.w	r2, r2, #4
 80030b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69d9      	ldr	r1, [r3, #28]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	61da      	str	r2, [r3, #28]
      break;
 80030c4:	e023      	b.n	800310e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68b9      	ldr	r1, [r7, #8]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fb4b 	bl	8003768 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69da      	ldr	r2, [r3, #28]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69da      	ldr	r2, [r3, #28]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69d9      	ldr	r1, [r3, #28]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	021a      	lsls	r2, r3, #8
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	61da      	str	r2, [r3, #28]
      break;
 8003106:	e002      	b.n	800310e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	75fb      	strb	r3, [r7, #23]
      break;
 800310c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003116:	7dfb      	ldrb	r3, [r7, #23]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_TIM_ConfigClockSource+0x1c>
 8003138:	2302      	movs	r3, #2
 800313a:	e0b4      	b.n	80032a6 <HAL_TIM_ConfigClockSource+0x186>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800315a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003162:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003174:	d03e      	beq.n	80031f4 <HAL_TIM_ConfigClockSource+0xd4>
 8003176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800317a:	f200 8087 	bhi.w	800328c <HAL_TIM_ConfigClockSource+0x16c>
 800317e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003182:	f000 8086 	beq.w	8003292 <HAL_TIM_ConfigClockSource+0x172>
 8003186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318a:	d87f      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 800318c:	2b70      	cmp	r3, #112	; 0x70
 800318e:	d01a      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0xa6>
 8003190:	2b70      	cmp	r3, #112	; 0x70
 8003192:	d87b      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 8003194:	2b60      	cmp	r3, #96	; 0x60
 8003196:	d050      	beq.n	800323a <HAL_TIM_ConfigClockSource+0x11a>
 8003198:	2b60      	cmp	r3, #96	; 0x60
 800319a:	d877      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 800319c:	2b50      	cmp	r3, #80	; 0x50
 800319e:	d03c      	beq.n	800321a <HAL_TIM_ConfigClockSource+0xfa>
 80031a0:	2b50      	cmp	r3, #80	; 0x50
 80031a2:	d873      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 80031a4:	2b40      	cmp	r3, #64	; 0x40
 80031a6:	d058      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x13a>
 80031a8:	2b40      	cmp	r3, #64	; 0x40
 80031aa:	d86f      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 80031ac:	2b30      	cmp	r3, #48	; 0x30
 80031ae:	d064      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x15a>
 80031b0:	2b30      	cmp	r3, #48	; 0x30
 80031b2:	d86b      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d060      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x15a>
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d867      	bhi.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d05c      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x15a>
 80031c0:	2b10      	cmp	r3, #16
 80031c2:	d05a      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x15a>
 80031c4:	e062      	b.n	800328c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	6899      	ldr	r1, [r3, #8]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f000 fcc1 	bl	8003b5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	609a      	str	r2, [r3, #8]
      break;
 80031f2:	e04f      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	6899      	ldr	r1, [r3, #8]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f000 fcaa 	bl	8003b5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003216:	609a      	str	r2, [r3, #8]
      break;
 8003218:	e03c      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6859      	ldr	r1, [r3, #4]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	461a      	mov	r2, r3
 8003228:	f000 fb68 	bl	80038fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2150      	movs	r1, #80	; 0x50
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fc77 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 8003238:	e02c      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	6859      	ldr	r1, [r3, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	461a      	mov	r2, r3
 8003248:	f000 fbc4 	bl	80039d4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2160      	movs	r1, #96	; 0x60
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fc67 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 8003258:	e01c      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6859      	ldr	r1, [r3, #4]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	461a      	mov	r2, r3
 8003268:	f000 fb48 	bl	80038fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2140      	movs	r1, #64	; 0x40
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fc57 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 8003278:	e00c      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4619      	mov	r1, r3
 8003284:	4610      	mov	r0, r2
 8003286:	f000 fc4e 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 800328a:	e003      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	73fb      	strb	r3, [r7, #15]
      break;
 8003290:	e000      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003292:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b0c      	cmp	r3, #12
 80032c2:	d831      	bhi.n	8003328 <HAL_TIM_ReadCapturedValue+0x78>
 80032c4:	a201      	add	r2, pc, #4	; (adr r2, 80032cc <HAL_TIM_ReadCapturedValue+0x1c>)
 80032c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ca:	bf00      	nop
 80032cc:	08003301 	.word	0x08003301
 80032d0:	08003329 	.word	0x08003329
 80032d4:	08003329 	.word	0x08003329
 80032d8:	08003329 	.word	0x08003329
 80032dc:	0800330b 	.word	0x0800330b
 80032e0:	08003329 	.word	0x08003329
 80032e4:	08003329 	.word	0x08003329
 80032e8:	08003329 	.word	0x08003329
 80032ec:	08003315 	.word	0x08003315
 80032f0:	08003329 	.word	0x08003329
 80032f4:	08003329 	.word	0x08003329
 80032f8:	08003329 	.word	0x08003329
 80032fc:	0800331f 	.word	0x0800331f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003306:	60fb      	str	r3, [r7, #12]

      break;
 8003308:	e00f      	b.n	800332a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003310:	60fb      	str	r3, [r7, #12]

      break;
 8003312:	e00a      	b.n	800332a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331a:	60fb      	str	r3, [r7, #12]

      break;
 800331c:	e005      	b.n	800332a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	60fb      	str	r3, [r7, #12]

      break;
 8003326:	e000      	b.n	800332a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003328:	bf00      	nop
  }

  return tmpreg;
 800332a:	68fb      	ldr	r3, [r7, #12]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a40      	ldr	r2, [pc, #256]	; (8003488 <TIM_Base_SetConfig+0x114>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d013      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003392:	d00f      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a3d      	ldr	r2, [pc, #244]	; (800348c <TIM_Base_SetConfig+0x118>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00b      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a3c      	ldr	r2, [pc, #240]	; (8003490 <TIM_Base_SetConfig+0x11c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d007      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a3b      	ldr	r2, [pc, #236]	; (8003494 <TIM_Base_SetConfig+0x120>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d003      	beq.n	80033b4 <TIM_Base_SetConfig+0x40>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a3a      	ldr	r2, [pc, #232]	; (8003498 <TIM_Base_SetConfig+0x124>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d108      	bne.n	80033c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a2f      	ldr	r2, [pc, #188]	; (8003488 <TIM_Base_SetConfig+0x114>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d02b      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d4:	d027      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a2c      	ldr	r2, [pc, #176]	; (800348c <TIM_Base_SetConfig+0x118>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d023      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a2b      	ldr	r2, [pc, #172]	; (8003490 <TIM_Base_SetConfig+0x11c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01f      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a2a      	ldr	r2, [pc, #168]	; (8003494 <TIM_Base_SetConfig+0x120>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d01b      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a29      	ldr	r2, [pc, #164]	; (8003498 <TIM_Base_SetConfig+0x124>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d017      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a28      	ldr	r2, [pc, #160]	; (800349c <TIM_Base_SetConfig+0x128>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d013      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a27      	ldr	r2, [pc, #156]	; (80034a0 <TIM_Base_SetConfig+0x12c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00f      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a26      	ldr	r2, [pc, #152]	; (80034a4 <TIM_Base_SetConfig+0x130>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00b      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a25      	ldr	r2, [pc, #148]	; (80034a8 <TIM_Base_SetConfig+0x134>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d007      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a24      	ldr	r2, [pc, #144]	; (80034ac <TIM_Base_SetConfig+0x138>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d003      	beq.n	8003426 <TIM_Base_SetConfig+0xb2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a23      	ldr	r2, [pc, #140]	; (80034b0 <TIM_Base_SetConfig+0x13c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d108      	bne.n	8003438 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800342c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <TIM_Base_SetConfig+0x114>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d003      	beq.n	800346c <TIM_Base_SetConfig+0xf8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a0c      	ldr	r2, [pc, #48]	; (8003498 <TIM_Base_SetConfig+0x124>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d103      	bne.n	8003474 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	615a      	str	r2, [r3, #20]
}
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40010000 	.word	0x40010000
 800348c:	40000400 	.word	0x40000400
 8003490:	40000800 	.word	0x40000800
 8003494:	40000c00 	.word	0x40000c00
 8003498:	40010400 	.word	0x40010400
 800349c:	40014000 	.word	0x40014000
 80034a0:	40014400 	.word	0x40014400
 80034a4:	40014800 	.word	0x40014800
 80034a8:	40001800 	.word	0x40001800
 80034ac:	40001c00 	.word	0x40001c00
 80034b0:	40002000 	.word	0x40002000

080034b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	f023 0201 	bic.w	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0303 	bic.w	r3, r3, #3
 80034ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f023 0302 	bic.w	r3, r3, #2
 80034fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a20      	ldr	r2, [pc, #128]	; (800358c <TIM_OC1_SetConfig+0xd8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d003      	beq.n	8003518 <TIM_OC1_SetConfig+0x64>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a1f      	ldr	r2, [pc, #124]	; (8003590 <TIM_OC1_SetConfig+0xdc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d10c      	bne.n	8003532 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f023 0308 	bic.w	r3, r3, #8
 800351e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	4313      	orrs	r3, r2
 8003528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f023 0304 	bic.w	r3, r3, #4
 8003530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a15      	ldr	r2, [pc, #84]	; (800358c <TIM_OC1_SetConfig+0xd8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d003      	beq.n	8003542 <TIM_OC1_SetConfig+0x8e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a14      	ldr	r2, [pc, #80]	; (8003590 <TIM_OC1_SetConfig+0xdc>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d111      	bne.n	8003566 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	621a      	str	r2, [r3, #32]
}
 8003580:	bf00      	nop
 8003582:	371c      	adds	r7, #28
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	40010000 	.word	0x40010000
 8003590:	40010400 	.word	0x40010400

08003594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	f023 0210 	bic.w	r2, r3, #16
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f023 0320 	bic.w	r3, r3, #32
 80035de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a22      	ldr	r2, [pc, #136]	; (8003678 <TIM_OC2_SetConfig+0xe4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d003      	beq.n	80035fc <TIM_OC2_SetConfig+0x68>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a21      	ldr	r2, [pc, #132]	; (800367c <TIM_OC2_SetConfig+0xe8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d10d      	bne.n	8003618 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003616:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a17      	ldr	r2, [pc, #92]	; (8003678 <TIM_OC2_SetConfig+0xe4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d003      	beq.n	8003628 <TIM_OC2_SetConfig+0x94>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a16      	ldr	r2, [pc, #88]	; (800367c <TIM_OC2_SetConfig+0xe8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d113      	bne.n	8003650 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800362e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	621a      	str	r2, [r3, #32]
}
 800366a:	bf00      	nop
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40010000 	.word	0x40010000
 800367c:	40010400 	.word	0x40010400

08003680 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0303 	bic.w	r3, r3, #3
 80036b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	021b      	lsls	r3, r3, #8
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a21      	ldr	r2, [pc, #132]	; (8003760 <TIM_OC3_SetConfig+0xe0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d003      	beq.n	80036e6 <TIM_OC3_SetConfig+0x66>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a20      	ldr	r2, [pc, #128]	; (8003764 <TIM_OC3_SetConfig+0xe4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d10d      	bne.n	8003702 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	021b      	lsls	r3, r3, #8
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a16      	ldr	r2, [pc, #88]	; (8003760 <TIM_OC3_SetConfig+0xe0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d003      	beq.n	8003712 <TIM_OC3_SetConfig+0x92>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a15      	ldr	r2, [pc, #84]	; (8003764 <TIM_OC3_SetConfig+0xe4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d113      	bne.n	800373a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	621a      	str	r2, [r3, #32]
}
 8003754:	bf00      	nop
 8003756:	371c      	adds	r7, #28
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	40010000 	.word	0x40010000
 8003764:	40010400 	.word	0x40010400

08003768 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800379e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	031b      	lsls	r3, r3, #12
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a12      	ldr	r2, [pc, #72]	; (800380c <TIM_OC4_SetConfig+0xa4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d003      	beq.n	80037d0 <TIM_OC4_SetConfig+0x68>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a11      	ldr	r2, [pc, #68]	; (8003810 <TIM_OC4_SetConfig+0xa8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d109      	bne.n	80037e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	019b      	lsls	r3, r3, #6
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	621a      	str	r2, [r3, #32]
}
 80037fe:	bf00      	nop
 8003800:	371c      	adds	r7, #28
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40010000 	.word	0x40010000
 8003810:	40010400 	.word	0x40010400

08003814 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	f023 0201 	bic.w	r2, r3, #1
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4a28      	ldr	r2, [pc, #160]	; (80038e0 <TIM_TI1_SetConfig+0xcc>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d01b      	beq.n	800387a <TIM_TI1_SetConfig+0x66>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003848:	d017      	beq.n	800387a <TIM_TI1_SetConfig+0x66>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4a25      	ldr	r2, [pc, #148]	; (80038e4 <TIM_TI1_SetConfig+0xd0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d013      	beq.n	800387a <TIM_TI1_SetConfig+0x66>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4a24      	ldr	r2, [pc, #144]	; (80038e8 <TIM_TI1_SetConfig+0xd4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00f      	beq.n	800387a <TIM_TI1_SetConfig+0x66>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4a23      	ldr	r2, [pc, #140]	; (80038ec <TIM_TI1_SetConfig+0xd8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00b      	beq.n	800387a <TIM_TI1_SetConfig+0x66>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4a22      	ldr	r2, [pc, #136]	; (80038f0 <TIM_TI1_SetConfig+0xdc>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d007      	beq.n	800387a <TIM_TI1_SetConfig+0x66>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4a21      	ldr	r2, [pc, #132]	; (80038f4 <TIM_TI1_SetConfig+0xe0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d003      	beq.n	800387a <TIM_TI1_SetConfig+0x66>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4a20      	ldr	r2, [pc, #128]	; (80038f8 <TIM_TI1_SetConfig+0xe4>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d101      	bne.n	800387e <TIM_TI1_SetConfig+0x6a>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <TIM_TI1_SetConfig+0x6c>
 800387e:	2300      	movs	r3, #0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f023 0303 	bic.w	r3, r3, #3
 800388a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4313      	orrs	r3, r2
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	e003      	b.n	800389e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f023 030a 	bic.w	r3, r3, #10
 80038b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f003 030a 	and.w	r3, r3, #10
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	621a      	str	r2, [r3, #32]
}
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40010000 	.word	0x40010000
 80038e4:	40000400 	.word	0x40000400
 80038e8:	40000800 	.word	0x40000800
 80038ec:	40000c00 	.word	0x40000c00
 80038f0:	40010400 	.word	0x40010400
 80038f4:	40014000 	.word	0x40014000
 80038f8:	40001800 	.word	0x40001800

080038fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	f023 0201 	bic.w	r2, r3, #1
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f023 030a 	bic.w	r3, r3, #10
 8003938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	621a      	str	r2, [r3, #32]
}
 800394e:	bf00      	nop
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800395a:	b480      	push	{r7}
 800395c:	b087      	sub	sp, #28
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f023 0210 	bic.w	r2, r3, #16
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003986:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	021b      	lsls	r3, r3, #8
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	4313      	orrs	r3, r2
 8003990:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003998:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	031b      	lsls	r3, r3, #12
 800399e:	b29b      	uxth	r3, r3
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	621a      	str	r2, [r3, #32]
}
 80039c8:	bf00      	nop
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	f023 0210 	bic.w	r2, r3, #16
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	031b      	lsls	r3, r3, #12
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	621a      	str	r2, [r3, #32]
}
 8003a28:	bf00      	nop
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f023 0303 	bic.w	r3, r3, #3
 8003a60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003a84:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	021b      	lsls	r3, r3, #8
 8003a8a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	621a      	str	r2, [r3, #32]
}
 8003aa0:	bf00      	nop
 8003aa2:	371c      	adds	r7, #28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	031b      	lsls	r3, r3, #12
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003afe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	031b      	lsls	r3, r3, #12
 8003b04:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	621a      	str	r2, [r3, #32]
}
 8003b1a:	bf00      	nop
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b085      	sub	sp, #20
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f043 0307 	orr.w	r3, r3, #7
 8003b48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	609a      	str	r2, [r3, #8]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	021a      	lsls	r2, r3, #8
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	609a      	str	r2, [r3, #8]
}
 8003b90:	bf00      	nop
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	2201      	movs	r2, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a1a      	ldr	r2, [r3, #32]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	401a      	ands	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a1a      	ldr	r2, [r3, #32]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f003 031f 	and.w	r3, r3, #31
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	621a      	str	r2, [r3, #32]
}
 8003bda:	bf00      	nop
 8003bdc:	371c      	adds	r7, #28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e05a      	b.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a21      	ldr	r2, [pc, #132]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d022      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c4c:	d01d      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d018      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1b      	ldr	r2, [pc, #108]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1a      	ldr	r2, [pc, #104]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00e      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d009      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a17      	ldr	r2, [pc, #92]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a15      	ldr	r2, [pc, #84]	; (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10c      	bne.n	8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40010000 	.word	0x40010000
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40000800 	.word	0x40000800
 8003cd0:	40000c00 	.word	0x40000c00
 8003cd4:	40010400 	.word	0x40010400
 8003cd8:	40014000 	.word	0x40014000
 8003cdc:	40001800 	.word	0x40001800

08003ce0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e03d      	b.n	8003d78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e03f      	b.n	8003e3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fd f9c6 	bl	8001164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2224      	movs	r2, #36	; 0x24
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fddb 	bl	80049ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b08a      	sub	sp, #40	; 0x28
 8003e4a:	af02      	add	r7, sp, #8
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	4613      	mov	r3, r2
 8003e54:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	d17c      	bne.n	8003f60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <HAL_UART_Transmit+0x2c>
 8003e6c:	88fb      	ldrh	r3, [r7, #6]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e075      	b.n	8003f62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_UART_Transmit+0x3e>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e06e      	b.n	8003f62 <HAL_UART_Transmit+0x11c>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2221      	movs	r2, #33	; 0x21
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e9a:	f7fd faa9 	bl	80013f0 <HAL_GetTick>
 8003e9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	88fa      	ldrh	r2, [r7, #6]
 8003ea4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	88fa      	ldrh	r2, [r7, #6]
 8003eaa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb4:	d108      	bne.n	8003ec8 <HAL_UART_Transmit+0x82>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d104      	bne.n	8003ec8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	e003      	b.n	8003ed0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ed8:	e02a      	b.n	8003f30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	2180      	movs	r1, #128	; 0x80
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 fb1f 	bl	8004528 <UART_WaitOnFlagUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e036      	b.n	8003f62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10b      	bne.n	8003f12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	3302      	adds	r3, #2
 8003f0e:	61bb      	str	r3, [r7, #24]
 8003f10:	e007      	b.n	8003f22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	781a      	ldrb	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1cf      	bne.n	8003eda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2200      	movs	r2, #0
 8003f42:	2140      	movs	r1, #64	; 0x40
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 faef 	bl	8004528 <UART_WaitOnFlagUntilTimeout>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e006      	b.n	8003f62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	e000      	b.n	8003f62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f60:	2302      	movs	r3, #2
  }
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3720      	adds	r7, #32
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	4613      	mov	r3, r2
 8003f76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	d11d      	bne.n	8003fc0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <HAL_UART_Receive_IT+0x26>
 8003f8a:	88fb      	ldrh	r3, [r7, #6]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e016      	b.n	8003fc2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_UART_Receive_IT+0x38>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e00f      	b.n	8003fc2 <HAL_UART_Receive_IT+0x58>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	68b9      	ldr	r1, [r7, #8]
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 fb24 	bl	8004604 <UART_Start_Receive_IT>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	e000      	b.n	8003fc2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003fc0:	2302      	movs	r3, #2
  }
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b0ba      	sub	sp, #232	; 0xe8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800400a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10f      	bne.n	8004032 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	d009      	beq.n	8004032 <HAL_UART_IRQHandler+0x66>
 800401e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fc03 	bl	8004836 <UART_Receive_IT>
      return;
 8004030:	e256      	b.n	80044e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004032:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 80de 	beq.w	80041f8 <HAL_UART_IRQHandler+0x22c>
 800403c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d106      	bne.n	8004056 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800404c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 80d1 	beq.w	80041f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00b      	beq.n	800407a <HAL_UART_IRQHandler+0xae>
 8004062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	f043 0201 	orr.w	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800407a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <HAL_UART_IRQHandler+0xd2>
 8004086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f043 0202 	orr.w	r2, r3, #2
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800409e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00b      	beq.n	80040c2 <HAL_UART_IRQHandler+0xf6>
 80040aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d005      	beq.n	80040c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	f043 0204 	orr.w	r2, r3, #4
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d011      	beq.n	80040f2 <HAL_UART_IRQHandler+0x126>
 80040ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d105      	bne.n	80040e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f043 0208 	orr.w	r2, r3, #8
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 81ed 	beq.w	80044d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	2b00      	cmp	r3, #0
 8004106:	d008      	beq.n	800411a <HAL_UART_IRQHandler+0x14e>
 8004108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 fb8e 	bl	8004836 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004124:	2b40      	cmp	r3, #64	; 0x40
 8004126:	bf0c      	ite	eq
 8004128:	2301      	moveq	r3, #1
 800412a:	2300      	movne	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d103      	bne.n	8004146 <HAL_UART_IRQHandler+0x17a>
 800413e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004142:	2b00      	cmp	r3, #0
 8004144:	d04f      	beq.n	80041e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fa96 	bl	8004678 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004156:	2b40      	cmp	r3, #64	; 0x40
 8004158:	d141      	bne.n	80041de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3314      	adds	r3, #20
 8004160:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004170:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004178:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3314      	adds	r3, #20
 8004182:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004186:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800418a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004192:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800419e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1d9      	bne.n	800415a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d013      	beq.n	80041d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	4a7d      	ldr	r2, [pc, #500]	; (80043a8 <HAL_UART_IRQHandler+0x3dc>)
 80041b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fd fabf 	bl	800173e <HAL_DMA_Abort_IT>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d016      	beq.n	80041f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041d0:	4610      	mov	r0, r2
 80041d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d4:	e00e      	b.n	80041f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f990 	bl	80044fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041dc:	e00a      	b.n	80041f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f98c 	bl	80044fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e4:	e006      	b.n	80041f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f988 	bl	80044fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80041f2:	e170      	b.n	80044d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f4:	bf00      	nop
    return;
 80041f6:	e16e      	b.n	80044d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	f040 814a 	bne.w	8004496 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004206:	f003 0310 	and.w	r3, r3, #16
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 8143 	beq.w	8004496 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 813c 	beq.w	8004496 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800421e:	2300      	movs	r3, #0
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	60bb      	str	r3, [r7, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423e:	2b40      	cmp	r3, #64	; 0x40
 8004240:	f040 80b4 	bne.w	80043ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004250:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 8140 	beq.w	80044da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800425e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004262:	429a      	cmp	r2, r3
 8004264:	f080 8139 	bcs.w	80044da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800426e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800427a:	f000 8088 	beq.w	800438e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	330c      	adds	r3, #12
 8004284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004294:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800429c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	330c      	adds	r3, #12
 80042a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80042aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80042b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80042c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1d9      	bne.n	800427e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3314      	adds	r3, #20
 80042d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042d4:	e853 3f00 	ldrex	r3, [r3]
 80042d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80042da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042dc:	f023 0301 	bic.w	r3, r3, #1
 80042e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3314      	adds	r3, #20
 80042ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80042f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80042f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004300:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e1      	bne.n	80042ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3314      	adds	r3, #20
 800430c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004310:	e853 3f00 	ldrex	r3, [r3]
 8004314:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800431c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3314      	adds	r3, #20
 8004326:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800432a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800432c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004330:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1e3      	bne.n	8004306 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	330c      	adds	r3, #12
 8004352:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800435c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800435e:	f023 0310 	bic.w	r3, r3, #16
 8004362:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	330c      	adds	r3, #12
 800436c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004370:	65ba      	str	r2, [r7, #88]	; 0x58
 8004372:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004376:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004378:	e841 2300 	strex	r3, r2, [r1]
 800437c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800437e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e3      	bne.n	800434c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004388:	4618      	mov	r0, r3
 800438a:	f7fd f968 	bl	800165e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004396:	b29b      	uxth	r3, r3
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	b29b      	uxth	r3, r3
 800439c:	4619      	mov	r1, r3
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f8b6 	bl	8004510 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043a4:	e099      	b.n	80044da <HAL_UART_IRQHandler+0x50e>
 80043a6:	bf00      	nop
 80043a8:	0800473f 	.word	0x0800473f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 808b 	beq.w	80044de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80043c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8086 	beq.w	80044de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	330c      	adds	r3, #12
 80043d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	330c      	adds	r3, #12
 80043f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80043f6:	647a      	str	r2, [r7, #68]	; 0x44
 80043f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e3      	bne.n	80043d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3314      	adds	r3, #20
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	623b      	str	r3, [r7, #32]
   return(result);
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	f023 0301 	bic.w	r3, r3, #1
 8004420:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3314      	adds	r3, #20
 800442a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800442e:	633a      	str	r2, [r7, #48]	; 0x30
 8004430:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004436:	e841 2300 	strex	r3, r2, [r1]
 800443a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800443c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e3      	bne.n	800440a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	330c      	adds	r3, #12
 8004456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0310 	bic.w	r3, r3, #16
 8004466:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	330c      	adds	r3, #12
 8004470:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004474:	61fa      	str	r2, [r7, #28]
 8004476:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004478:	69b9      	ldr	r1, [r7, #24]
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	e841 2300 	strex	r3, r2, [r1]
 8004480:	617b      	str	r3, [r7, #20]
   return(result);
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e3      	bne.n	8004450 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004488:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800448c:	4619      	mov	r1, r3
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f83e 	bl	8004510 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004494:	e023      	b.n	80044de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800449a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d009      	beq.n	80044b6 <HAL_UART_IRQHandler+0x4ea>
 80044a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f959 	bl	8004766 <UART_Transmit_IT>
    return;
 80044b4:	e014      	b.n	80044e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00e      	beq.n	80044e0 <HAL_UART_IRQHandler+0x514>
 80044c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d008      	beq.n	80044e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f999 	bl	8004806 <UART_EndTransmit_IT>
    return;
 80044d4:	e004      	b.n	80044e0 <HAL_UART_IRQHandler+0x514>
    return;
 80044d6:	bf00      	nop
 80044d8:	e002      	b.n	80044e0 <HAL_UART_IRQHandler+0x514>
      return;
 80044da:	bf00      	nop
 80044dc:	e000      	b.n	80044e0 <HAL_UART_IRQHandler+0x514>
      return;
 80044de:	bf00      	nop
  }
}
 80044e0:	37e8      	adds	r7, #232	; 0xe8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop

080044e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b090      	sub	sp, #64	; 0x40
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	4613      	mov	r3, r2
 8004536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004538:	e050      	b.n	80045dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800453c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004540:	d04c      	beq.n	80045dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004544:	2b00      	cmp	r3, #0
 8004546:	d007      	beq.n	8004558 <UART_WaitOnFlagUntilTimeout+0x30>
 8004548:	f7fc ff52 	bl	80013f0 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004554:	429a      	cmp	r2, r3
 8004556:	d241      	bcs.n	80045dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	330c      	adds	r3, #12
 800455e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800456e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	330c      	adds	r3, #12
 8004576:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004578:	637a      	str	r2, [r7, #52]	; 0x34
 800457a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800457e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004580:	e841 2300 	strex	r3, r2, [r1]
 8004584:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e5      	bne.n	8004558 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3314      	adds	r3, #20
 8004592:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	e853 3f00 	ldrex	r3, [r3]
 800459a:	613b      	str	r3, [r7, #16]
   return(result);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f023 0301 	bic.w	r3, r3, #1
 80045a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3314      	adds	r3, #20
 80045aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045ac:	623a      	str	r2, [r7, #32]
 80045ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b0:	69f9      	ldr	r1, [r7, #28]
 80045b2:	6a3a      	ldr	r2, [r7, #32]
 80045b4:	e841 2300 	strex	r3, r2, [r1]
 80045b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1e5      	bne.n	800458c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e00f      	b.n	80045fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	4013      	ands	r3, r2
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	bf0c      	ite	eq
 80045ec:	2301      	moveq	r3, #1
 80045ee:	2300      	movne	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	461a      	mov	r2, r3
 80045f4:	79fb      	ldrb	r3, [r7, #7]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d09f      	beq.n	800453a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3740      	adds	r7, #64	; 0x40
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	4613      	mov	r3, r2
 8004610:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	88fa      	ldrh	r2, [r7, #6]
 800461c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	88fa      	ldrh	r2, [r7, #6]
 8004622:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2222      	movs	r2, #34	; 0x22
 800462e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004648:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695a      	ldr	r2, [r3, #20]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0201 	orr.w	r2, r2, #1
 8004658:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0220 	orr.w	r2, r2, #32
 8004668:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004678:	b480      	push	{r7}
 800467a:	b095      	sub	sp, #84	; 0x54
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	330c      	adds	r3, #12
 8004686:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468a:	e853 3f00 	ldrex	r3, [r3]
 800468e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	330c      	adds	r3, #12
 800469e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046a0:	643a      	str	r2, [r7, #64]	; 0x40
 80046a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046a8:	e841 2300 	strex	r3, r2, [r1]
 80046ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1e5      	bne.n	8004680 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3314      	adds	r3, #20
 80046ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	e853 3f00 	ldrex	r3, [r3]
 80046c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	f023 0301 	bic.w	r3, r3, #1
 80046ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3314      	adds	r3, #20
 80046d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046dc:	e841 2300 	strex	r3, r2, [r1]
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1e5      	bne.n	80046b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d119      	bne.n	8004724 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	330c      	adds	r3, #12
 80046f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	e853 3f00 	ldrex	r3, [r3]
 80046fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f023 0310 	bic.w	r3, r3, #16
 8004706:	647b      	str	r3, [r7, #68]	; 0x44
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	330c      	adds	r3, #12
 800470e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004710:	61ba      	str	r2, [r7, #24]
 8004712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004714:	6979      	ldr	r1, [r7, #20]
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	e841 2300 	strex	r3, r2, [r1]
 800471c:	613b      	str	r3, [r7, #16]
   return(result);
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1e5      	bne.n	80046f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004732:	bf00      	nop
 8004734:	3754      	adds	r7, #84	; 0x54
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f7ff fecf 	bl	80044fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800475e:	bf00      	nop
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004766:	b480      	push	{r7}
 8004768:	b085      	sub	sp, #20
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b21      	cmp	r3, #33	; 0x21
 8004778:	d13e      	bne.n	80047f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004782:	d114      	bne.n	80047ae <UART_Transmit_IT+0x48>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d110      	bne.n	80047ae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	461a      	mov	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	1c9a      	adds	r2, r3, #2
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	621a      	str	r2, [r3, #32]
 80047ac:	e008      	b.n	80047c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	1c59      	adds	r1, r3, #1
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6211      	str	r1, [r2, #32]
 80047b8:	781a      	ldrb	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	4619      	mov	r1, r3
 80047ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10f      	bne.n	80047f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	e000      	b.n	80047fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047f8:	2302      	movs	r3, #2
  }
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800481c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff fe5e 	bl	80044e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b08c      	sub	sp, #48	; 0x30
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b22      	cmp	r3, #34	; 0x22
 8004848:	f040 80ab 	bne.w	80049a2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004854:	d117      	bne.n	8004886 <UART_Receive_IT+0x50>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d113      	bne.n	8004886 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800485e:	2300      	movs	r3, #0
 8004860:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	b29b      	uxth	r3, r3
 8004870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004874:	b29a      	uxth	r2, r3
 8004876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004878:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487e:	1c9a      	adds	r2, r3, #2
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	629a      	str	r2, [r3, #40]	; 0x28
 8004884:	e026      	b.n	80048d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800488c:	2300      	movs	r3, #0
 800488e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004898:	d007      	beq.n	80048aa <UART_Receive_IT+0x74>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10a      	bne.n	80048b8 <UART_Receive_IT+0x82>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d106      	bne.n	80048b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	e008      	b.n	80048ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29b      	uxth	r3, r3
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	4619      	mov	r1, r3
 80048e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d15a      	bne.n	800499e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0220 	bic.w	r2, r2, #32
 80048f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004906:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695a      	ldr	r2, [r3, #20]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0201 	bic.w	r2, r2, #1
 8004916:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	2b01      	cmp	r3, #1
 8004926:	d135      	bne.n	8004994 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	330c      	adds	r3, #12
 8004934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	e853 3f00 	ldrex	r3, [r3]
 800493c:	613b      	str	r3, [r7, #16]
   return(result);
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f023 0310 	bic.w	r3, r3, #16
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	330c      	adds	r3, #12
 800494c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800494e:	623a      	str	r2, [r7, #32]
 8004950:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004952:	69f9      	ldr	r1, [r7, #28]
 8004954:	6a3a      	ldr	r2, [r7, #32]
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	61bb      	str	r3, [r7, #24]
   return(result);
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1e5      	bne.n	800492e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0310 	and.w	r3, r3, #16
 800496c:	2b10      	cmp	r3, #16
 800496e:	d10a      	bne.n	8004986 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800498a:	4619      	mov	r1, r3
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff fdbf 	bl	8004510 <HAL_UARTEx_RxEventCallback>
 8004992:	e002      	b.n	800499a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7fc f9cf 	bl	8000d38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	e002      	b.n	80049a4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	e000      	b.n	80049a4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80049a2:	2302      	movs	r3, #2
  }
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3730      	adds	r7, #48	; 0x30
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b0:	b09f      	sub	sp, #124	; 0x7c
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c2:	68d9      	ldr	r1, [r3, #12]
 80049c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	ea40 0301 	orr.w	r3, r0, r1
 80049cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	431a      	orrs	r2, r3
 80049de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80049e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049f0:	f021 010c 	bic.w	r1, r1, #12
 80049f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049fa:	430b      	orrs	r3, r1
 80049fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0a:	6999      	ldr	r1, [r3, #24]
 8004a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	ea40 0301 	orr.w	r3, r0, r1
 8004a14:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	4bc5      	ldr	r3, [pc, #788]	; (8004d30 <UART_SetConfig+0x384>)
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d004      	beq.n	8004a2a <UART_SetConfig+0x7e>
 8004a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4bc3      	ldr	r3, [pc, #780]	; (8004d34 <UART_SetConfig+0x388>)
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d103      	bne.n	8004a32 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a2a:	f7fd f95f 	bl	8001cec <HAL_RCC_GetPCLK2Freq>
 8004a2e:	6778      	str	r0, [r7, #116]	; 0x74
 8004a30:	e002      	b.n	8004a38 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a32:	f7fd f947 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 8004a36:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a40:	f040 80b6 	bne.w	8004bb0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a46:	461c      	mov	r4, r3
 8004a48:	f04f 0500 	mov.w	r5, #0
 8004a4c:	4622      	mov	r2, r4
 8004a4e:	462b      	mov	r3, r5
 8004a50:	1891      	adds	r1, r2, r2
 8004a52:	6439      	str	r1, [r7, #64]	; 0x40
 8004a54:	415b      	adcs	r3, r3
 8004a56:	647b      	str	r3, [r7, #68]	; 0x44
 8004a58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a5c:	1912      	adds	r2, r2, r4
 8004a5e:	eb45 0303 	adc.w	r3, r5, r3
 8004a62:	f04f 0000 	mov.w	r0, #0
 8004a66:	f04f 0100 	mov.w	r1, #0
 8004a6a:	00d9      	lsls	r1, r3, #3
 8004a6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a70:	00d0      	lsls	r0, r2, #3
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	1911      	adds	r1, r2, r4
 8004a78:	6639      	str	r1, [r7, #96]	; 0x60
 8004a7a:	416b      	adcs	r3, r5
 8004a7c:	667b      	str	r3, [r7, #100]	; 0x64
 8004a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	461a      	mov	r2, r3
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	1891      	adds	r1, r2, r2
 8004a8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a8c:	415b      	adcs	r3, r3
 8004a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a94:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004a98:	f7fb fbb4 	bl	8000204 <__aeabi_uldivmod>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4ba5      	ldr	r3, [pc, #660]	; (8004d38 <UART_SetConfig+0x38c>)
 8004aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	011e      	lsls	r6, r3, #4
 8004aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aac:	461c      	mov	r4, r3
 8004aae:	f04f 0500 	mov.w	r5, #0
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	462b      	mov	r3, r5
 8004ab6:	1891      	adds	r1, r2, r2
 8004ab8:	6339      	str	r1, [r7, #48]	; 0x30
 8004aba:	415b      	adcs	r3, r3
 8004abc:	637b      	str	r3, [r7, #52]	; 0x34
 8004abe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ac2:	1912      	adds	r2, r2, r4
 8004ac4:	eb45 0303 	adc.w	r3, r5, r3
 8004ac8:	f04f 0000 	mov.w	r0, #0
 8004acc:	f04f 0100 	mov.w	r1, #0
 8004ad0:	00d9      	lsls	r1, r3, #3
 8004ad2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ad6:	00d0      	lsls	r0, r2, #3
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	1911      	adds	r1, r2, r4
 8004ade:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ae0:	416b      	adcs	r3, r5
 8004ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	1891      	adds	r1, r2, r2
 8004af0:	62b9      	str	r1, [r7, #40]	; 0x28
 8004af2:	415b      	adcs	r3, r3
 8004af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004af6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004afa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004afe:	f7fb fb81 	bl	8000204 <__aeabi_uldivmod>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4b8c      	ldr	r3, [pc, #560]	; (8004d38 <UART_SetConfig+0x38c>)
 8004b08:	fba3 1302 	umull	r1, r3, r3, r2
 8004b0c:	095b      	lsrs	r3, r3, #5
 8004b0e:	2164      	movs	r1, #100	; 0x64
 8004b10:	fb01 f303 	mul.w	r3, r1, r3
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	3332      	adds	r3, #50	; 0x32
 8004b1a:	4a87      	ldr	r2, [pc, #540]	; (8004d38 <UART_SetConfig+0x38c>)
 8004b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b28:	441e      	add	r6, r3
 8004b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f04f 0100 	mov.w	r1, #0
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	1894      	adds	r4, r2, r2
 8004b38:	623c      	str	r4, [r7, #32]
 8004b3a:	415b      	adcs	r3, r3
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b42:	1812      	adds	r2, r2, r0
 8004b44:	eb41 0303 	adc.w	r3, r1, r3
 8004b48:	f04f 0400 	mov.w	r4, #0
 8004b4c:	f04f 0500 	mov.w	r5, #0
 8004b50:	00dd      	lsls	r5, r3, #3
 8004b52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b56:	00d4      	lsls	r4, r2, #3
 8004b58:	4622      	mov	r2, r4
 8004b5a:	462b      	mov	r3, r5
 8004b5c:	1814      	adds	r4, r2, r0
 8004b5e:	653c      	str	r4, [r7, #80]	; 0x50
 8004b60:	414b      	adcs	r3, r1
 8004b62:	657b      	str	r3, [r7, #84]	; 0x54
 8004b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	1891      	adds	r1, r2, r2
 8004b70:	61b9      	str	r1, [r7, #24]
 8004b72:	415b      	adcs	r3, r3
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b7a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004b7e:	f7fb fb41 	bl	8000204 <__aeabi_uldivmod>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4b6c      	ldr	r3, [pc, #432]	; (8004d38 <UART_SetConfig+0x38c>)
 8004b88:	fba3 1302 	umull	r1, r3, r3, r2
 8004b8c:	095b      	lsrs	r3, r3, #5
 8004b8e:	2164      	movs	r1, #100	; 0x64
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	3332      	adds	r3, #50	; 0x32
 8004b9a:	4a67      	ldr	r2, [pc, #412]	; (8004d38 <UART_SetConfig+0x38c>)
 8004b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba0:	095b      	lsrs	r3, r3, #5
 8004ba2:	f003 0207 	and.w	r2, r3, #7
 8004ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4432      	add	r2, r6
 8004bac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bae:	e0b9      	b.n	8004d24 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bb2:	461c      	mov	r4, r3
 8004bb4:	f04f 0500 	mov.w	r5, #0
 8004bb8:	4622      	mov	r2, r4
 8004bba:	462b      	mov	r3, r5
 8004bbc:	1891      	adds	r1, r2, r2
 8004bbe:	6139      	str	r1, [r7, #16]
 8004bc0:	415b      	adcs	r3, r3
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bc8:	1912      	adds	r2, r2, r4
 8004bca:	eb45 0303 	adc.w	r3, r5, r3
 8004bce:	f04f 0000 	mov.w	r0, #0
 8004bd2:	f04f 0100 	mov.w	r1, #0
 8004bd6:	00d9      	lsls	r1, r3, #3
 8004bd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bdc:	00d0      	lsls	r0, r2, #3
 8004bde:	4602      	mov	r2, r0
 8004be0:	460b      	mov	r3, r1
 8004be2:	eb12 0804 	adds.w	r8, r2, r4
 8004be6:	eb43 0905 	adc.w	r9, r3, r5
 8004bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f04f 0100 	mov.w	r1, #0
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	008b      	lsls	r3, r1, #2
 8004bfe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c02:	0082      	lsls	r2, r0, #2
 8004c04:	4640      	mov	r0, r8
 8004c06:	4649      	mov	r1, r9
 8004c08:	f7fb fafc 	bl	8000204 <__aeabi_uldivmod>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4b49      	ldr	r3, [pc, #292]	; (8004d38 <UART_SetConfig+0x38c>)
 8004c12:	fba3 2302 	umull	r2, r3, r3, r2
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	011e      	lsls	r6, r3, #4
 8004c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f04f 0100 	mov.w	r1, #0
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	1894      	adds	r4, r2, r2
 8004c28:	60bc      	str	r4, [r7, #8]
 8004c2a:	415b      	adcs	r3, r3
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c32:	1812      	adds	r2, r2, r0
 8004c34:	eb41 0303 	adc.w	r3, r1, r3
 8004c38:	f04f 0400 	mov.w	r4, #0
 8004c3c:	f04f 0500 	mov.w	r5, #0
 8004c40:	00dd      	lsls	r5, r3, #3
 8004c42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c46:	00d4      	lsls	r4, r2, #3
 8004c48:	4622      	mov	r2, r4
 8004c4a:	462b      	mov	r3, r5
 8004c4c:	1814      	adds	r4, r2, r0
 8004c4e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004c50:	414b      	adcs	r3, r1
 8004c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f04f 0100 	mov.w	r1, #0
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	008b      	lsls	r3, r1, #2
 8004c68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c6c:	0082      	lsls	r2, r0, #2
 8004c6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c72:	f7fb fac7 	bl	8000204 <__aeabi_uldivmod>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4b2f      	ldr	r3, [pc, #188]	; (8004d38 <UART_SetConfig+0x38c>)
 8004c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	2164      	movs	r1, #100	; 0x64
 8004c84:	fb01 f303 	mul.w	r3, r1, r3
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	3332      	adds	r3, #50	; 0x32
 8004c8e:	4a2a      	ldr	r2, [pc, #168]	; (8004d38 <UART_SetConfig+0x38c>)
 8004c90:	fba2 2303 	umull	r2, r3, r2, r3
 8004c94:	095b      	lsrs	r3, r3, #5
 8004c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c9a:	441e      	add	r6, r3
 8004c9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f04f 0100 	mov.w	r1, #0
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	1894      	adds	r4, r2, r2
 8004caa:	603c      	str	r4, [r7, #0]
 8004cac:	415b      	adcs	r3, r3
 8004cae:	607b      	str	r3, [r7, #4]
 8004cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cb4:	1812      	adds	r2, r2, r0
 8004cb6:	eb41 0303 	adc.w	r3, r1, r3
 8004cba:	f04f 0400 	mov.w	r4, #0
 8004cbe:	f04f 0500 	mov.w	r5, #0
 8004cc2:	00dd      	lsls	r5, r3, #3
 8004cc4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004cc8:	00d4      	lsls	r4, r2, #3
 8004cca:	4622      	mov	r2, r4
 8004ccc:	462b      	mov	r3, r5
 8004cce:	eb12 0a00 	adds.w	sl, r2, r0
 8004cd2:	eb43 0b01 	adc.w	fp, r3, r1
 8004cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f04f 0100 	mov.w	r1, #0
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	008b      	lsls	r3, r1, #2
 8004cea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cee:	0082      	lsls	r2, r0, #2
 8004cf0:	4650      	mov	r0, sl
 8004cf2:	4659      	mov	r1, fp
 8004cf4:	f7fb fa86 	bl	8000204 <__aeabi_uldivmod>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4b0e      	ldr	r3, [pc, #56]	; (8004d38 <UART_SetConfig+0x38c>)
 8004cfe:	fba3 1302 	umull	r1, r3, r3, r2
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	2164      	movs	r1, #100	; 0x64
 8004d06:	fb01 f303 	mul.w	r3, r1, r3
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	3332      	adds	r3, #50	; 0x32
 8004d10:	4a09      	ldr	r2, [pc, #36]	; (8004d38 <UART_SetConfig+0x38c>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	f003 020f 	and.w	r2, r3, #15
 8004d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4432      	add	r2, r6
 8004d22:	609a      	str	r2, [r3, #8]
}
 8004d24:	bf00      	nop
 8004d26:	377c      	adds	r7, #124	; 0x7c
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d2e:	bf00      	nop
 8004d30:	40011000 	.word	0x40011000
 8004d34:	40011400 	.word	0x40011400
 8004d38:	51eb851f 	.word	0x51eb851f

08004d3c <set_cooling_fan_pwm>:
 */

#include "../Inc/cooling_fan.h"

void set_cooling_fan_pwm(uint8_t dutycyle, TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	4603      	mov	r3, r0
 8004d44:	6039      	str	r1, [r7, #0]
 8004d46:	71fb      	strb	r3, [r7, #7]
	uint8_t PWM = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	73fb      	strb	r3, [r7, #15]
	PWM = DUTY_CYCLE_INVERSE - dutycyle;
 8004d4c:	79fb      	ldrb	r3, [r7, #7]
 8004d4e:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8004d52:	73fb      	strb	r3, [r7, #15]
	htim->Instance->CCR1 = PWM; //Timer 2 CHANNEL 1
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	7bfa      	ldrb	r2, [r7, #15]
 8004d5a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004d5c:	bf00      	nop
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <get_cooling_frequency>:

int get_cooling_frequency(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
	if((cooling_fan_frequency - prevFrq > TOLERANCE) || (prevFrq - cooling_fan_frequency > TOLERANCE))
 8004d6c:	4b0d      	ldr	r3, [pc, #52]	; (8004da4 <get_cooling_frequency+0x3c>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <get_cooling_frequency+0x40>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	dc06      	bgt.n	8004d88 <get_cooling_frequency+0x20>
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <get_cooling_frequency+0x40>)
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <get_cooling_frequency+0x3c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	dd06      	ble.n	8004d96 <get_cooling_frequency+0x2e>
	{
		prevFrq = cooling_fan_frequency;
 8004d88:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <get_cooling_frequency+0x3c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a06      	ldr	r2, [pc, #24]	; (8004da8 <get_cooling_frequency+0x40>)
 8004d8e:	6013      	str	r3, [r2, #0]
		return cooling_fan_frequency;
 8004d90:	4b04      	ldr	r3, [pc, #16]	; (8004da4 <get_cooling_frequency+0x3c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	e001      	b.n	8004d9a <get_cooling_frequency+0x32>
	}
	return prevFrq;
 8004d96:	4b04      	ldr	r3, [pc, #16]	; (8004da8 <get_cooling_frequency+0x40>)
 8004d98:	681b      	ldr	r3, [r3, #0]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	20000188 	.word	0x20000188
 8004da8:	2000007c 	.word	0x2000007c

08004dac <get_cooling_rpm>:

int get_cooling_rpm(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
	int rpm = 0;
 8004db2:	2300      	movs	r3, #0
 8004db4:	607b      	str	r3, [r7, #4]

	rpm = get_cooling_frequency() * 30;
 8004db6:	f7ff ffd7 	bl	8004d68 <get_cooling_frequency>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	607b      	str	r3, [r7, #4]
	return rpm;
 8004dc6:	687b      	ldr	r3, [r7, #4]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <set_heater_fan_pwm>:

#include "../Inc/heater_fan.h"


void set_heater_fan_pwm(uint8_t dutycyle, TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	6039      	str	r1, [r7, #0]
 8004dda:	71fb      	strb	r3, [r7, #7]
	uint8_t PWM = 0;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	73fb      	strb	r3, [r7, #15]
	PWM = DUTY_CYCLE_INVERSE - dutycyle;
 8004de0:	79fb      	ldrb	r3, [r7, #7]
 8004de2:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8004de6:	73fb      	strb	r3, [r7, #15]
	htim->Instance -> CCR4 = PWM; //Timer 2 CHANNEL 4
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	7bfa      	ldrb	r2, [r7, #15]
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004df0:	bf00      	nop
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <set_lights>:
	}
}


void set_lights(int color)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b06      	cmp	r3, #6
 8004e08:	f200 8089 	bhi.w	8004f1e <set_lights+0x122>
 8004e0c:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <set_lights+0x18>)
 8004e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e12:	bf00      	nop
 8004e14:	08004edb 	.word	0x08004edb
 8004e18:	08004e53 	.word	0x08004e53
 8004e1c:	08004e75 	.word	0x08004e75
 8004e20:	08004e97 	.word	0x08004e97
 8004e24:	08004efd 	.word	0x08004efd
 8004e28:	08004eb9 	.word	0x08004eb9
 8004e2c:	08004e31 	.word	0x08004e31
	switch(color)
	{
		//Color : White
	    case WHITE:
	    	htim1.Instance->CCR4 = 0; //Modulation
 8004e30:	4b3e      	ldr	r3, [pc, #248]	; (8004f2c <set_lights+0x130>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2200      	movs	r2, #0
 8004e36:	641a      	str	r2, [r3, #64]	; 0x40
	    	htim1.Instance->CCR3 = 0; //Modulation
 8004e38:	4b3c      	ldr	r3, [pc, #240]	; (8004f2c <set_lights+0x130>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	63da      	str	r2, [r3, #60]	; 0x3c
	    	htim1.Instance->CCR2 = 0; //Modulation
 8004e40:	4b3a      	ldr	r3, [pc, #232]	; (8004f2c <set_lights+0x130>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2200      	movs	r2, #0
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38
	    	htim12.Instance->CCR1 = 100; //Modulation
 8004e48:	4b39      	ldr	r3, [pc, #228]	; (8004f30 <set_lights+0x134>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2264      	movs	r2, #100	; 0x64
 8004e4e:	635a      	str	r2, [r3, #52]	; 0x34
	    	break;
 8004e50:	e065      	b.n	8004f1e <set_lights+0x122>

	    case WHITE_PT:
	    	htim1.Instance->CCR4 = 0; //Modulation
 8004e52:	4b36      	ldr	r3, [pc, #216]	; (8004f2c <set_lights+0x130>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2200      	movs	r2, #0
 8004e58:	641a      	str	r2, [r3, #64]	; 0x40
	    	htim1.Instance->CCR3 = 0; //Modulation
 8004e5a:	4b34      	ldr	r3, [pc, #208]	; (8004f2c <set_lights+0x130>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	63da      	str	r2, [r3, #60]	; 0x3c
	    	htim1.Instance->CCR2 = 0; //Modulation
 8004e62:	4b32      	ldr	r3, [pc, #200]	; (8004f2c <set_lights+0x130>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2200      	movs	r2, #0
 8004e68:	639a      	str	r2, [r3, #56]	; 0x38
	    	htim12.Instance->CCR1 = 50; //Modulation
 8004e6a:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <set_lights+0x134>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2232      	movs	r2, #50	; 0x32
 8004e70:	635a      	str	r2, [r3, #52]	; 0x34
	    	break;
 8004e72:	e054      	b.n	8004f1e <set_lights+0x122>

	    case RED:
	    	htim1.Instance->CCR4 = 100; //Modulation
 8004e74:	4b2d      	ldr	r3, [pc, #180]	; (8004f2c <set_lights+0x130>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2264      	movs	r2, #100	; 0x64
 8004e7a:	641a      	str	r2, [r3, #64]	; 0x40
	    	htim1.Instance->CCR3 = 0; //Modulation
 8004e7c:	4b2b      	ldr	r3, [pc, #172]	; (8004f2c <set_lights+0x130>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2200      	movs	r2, #0
 8004e82:	63da      	str	r2, [r3, #60]	; 0x3c
	    	htim1.Instance->CCR2 = 0; //Modulation
 8004e84:	4b29      	ldr	r3, [pc, #164]	; (8004f2c <set_lights+0x130>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	639a      	str	r2, [r3, #56]	; 0x38
	    	htim12.Instance->CCR1 = 0; //Modulation
 8004e8c:	4b28      	ldr	r3, [pc, #160]	; (8004f30 <set_lights+0x134>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2200      	movs	r2, #0
 8004e92:	635a      	str	r2, [r3, #52]	; 0x34
	    	break;
 8004e94:	e043      	b.n	8004f1e <set_lights+0x122>

	    case GREEN:
	    	htim1.Instance->CCR4 = 0; //Modulation
 8004e96:	4b25      	ldr	r3, [pc, #148]	; (8004f2c <set_lights+0x130>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40
	    	htim1.Instance->CCR3 = 100; //Modulation
 8004e9e:	4b23      	ldr	r3, [pc, #140]	; (8004f2c <set_lights+0x130>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2264      	movs	r2, #100	; 0x64
 8004ea4:	63da      	str	r2, [r3, #60]	; 0x3c
	    	htim1.Instance->CCR2 = 0; //Modulation
 8004ea6:	4b21      	ldr	r3, [pc, #132]	; (8004f2c <set_lights+0x130>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	639a      	str	r2, [r3, #56]	; 0x38
	    	htim12.Instance->CCR1 = 0; //Modulation
 8004eae:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <set_lights+0x134>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	635a      	str	r2, [r3, #52]	; 0x34
	    	break;
 8004eb6:	e032      	b.n	8004f1e <set_lights+0x122>

	    case BLUE_HANDDDLE:
	    	htim1.Instance->CCR4 = 14; //Modulation
 8004eb8:	4b1c      	ldr	r3, [pc, #112]	; (8004f2c <set_lights+0x130>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	220e      	movs	r2, #14
 8004ebe:	641a      	str	r2, [r3, #64]	; 0x40
	    	htim1.Instance->CCR3 = 90; //Modulation
 8004ec0:	4b1a      	ldr	r3, [pc, #104]	; (8004f2c <set_lights+0x130>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	225a      	movs	r2, #90	; 0x5a
 8004ec6:	63da      	str	r2, [r3, #60]	; 0x3c
	    	htim1.Instance->CCR2 = 45; //Modulation
 8004ec8:	4b18      	ldr	r3, [pc, #96]	; (8004f2c <set_lights+0x130>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	222d      	movs	r2, #45	; 0x2d
 8004ece:	639a      	str	r2, [r3, #56]	; 0x38
	    	htim12.Instance->CCR1 = 0; //Modulation
 8004ed0:	4b17      	ldr	r3, [pc, #92]	; (8004f30 <set_lights+0x134>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	635a      	str	r2, [r3, #52]	; 0x34
	    	break;
 8004ed8:	e021      	b.n	8004f1e <set_lights+0x122>

	    case DARK:
	    	htim1.Instance->CCR4 = 0; //Modulation
 8004eda:	4b14      	ldr	r3, [pc, #80]	; (8004f2c <set_lights+0x130>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40
	    	htim1.Instance->CCR3 = 0; //Modulation
 8004ee2:	4b12      	ldr	r3, [pc, #72]	; (8004f2c <set_lights+0x130>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	63da      	str	r2, [r3, #60]	; 0x3c
	    	htim1.Instance->CCR2 = 0; //Modulation
 8004eea:	4b10      	ldr	r3, [pc, #64]	; (8004f2c <set_lights+0x130>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	639a      	str	r2, [r3, #56]	; 0x38
	    	htim12.Instance->CCR1 = 0; //Modulation
 8004ef2:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <set_lights+0x134>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	635a      	str	r2, [r3, #52]	; 0x34
	    	break;
 8004efa:	e010      	b.n	8004f1e <set_lights+0x122>

	    case ORANGE:
	    	htim1.Instance->CCR4 = 100; //Modulation
 8004efc:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <set_lights+0x130>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2264      	movs	r2, #100	; 0x64
 8004f02:	641a      	str	r2, [r3, #64]	; 0x40
	    	htim1.Instance->CCR3 = 40; //Modulation
 8004f04:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <set_lights+0x130>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2228      	movs	r2, #40	; 0x28
 8004f0a:	63da      	str	r2, [r3, #60]	; 0x3c
	    	htim1.Instance->CCR2 = 0; //Modulation
 8004f0c:	4b07      	ldr	r3, [pc, #28]	; (8004f2c <set_lights+0x130>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2200      	movs	r2, #0
 8004f12:	639a      	str	r2, [r3, #56]	; 0x38
	    	htim12.Instance->CCR1 = 0; //Modulation
 8004f14:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <set_lights+0x134>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	635a      	str	r2, [r3, #52]	; 0x34
	    	break;
 8004f1c:	bf00      	nop
	}
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	20000130 	.word	0x20000130
 8004f30:	20000224 	.word	0x20000224

08004f34 <send_main_msg_light_color>:
#include "../../Inc/msg_types.h"
#include "../../uid.h"
#include "../../Inc/transport.h"


HAL_StatusTypeDef send_main_msg_light_color(uint8_t light_color,UART_HandleTypeDef * uart ){
 8004f34:	b590      	push	{r4, r7, lr}
 8004f36:	b08b      	sub	sp, #44	; 0x2c
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	6039      	str	r1, [r7, #0]
 8004f3e:	71fb      	strb	r3, [r7, #7]
	uint8_t Tx_msg_light_color[MSG_SIZE + OFFSET_OF_1] = {
 8004f40:	4b15      	ldr	r3, [pc, #84]	; (8004f98 <send_main_msg_light_color+0x64>)
 8004f42:	f107 040c 	add.w	r4, r7, #12
 8004f46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f48:	c407      	stmia	r4!, {r0, r1, r2}
 8004f4a:	7023      	strb	r3, [r4, #0]
 8004f4c:	f107 0319 	add.w	r3, r7, #25
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	605a      	str	r2, [r3, #4]
		MSG_TYPE_MAIN, // Message type
		MAIN_MSG_LIGHT_COLOR, // Sub message type
		MSG_LENGTH_FIRST_BYTE, MSG_LENGTH_1_SECOND_BYTE // Length
	}; // 12 first bytes

	Tx_msg_light_color[DATA] = light_color;
 8004f56:	79fb      	ldrb	r3, [r7, #7]
 8004f58:	763b      	strb	r3, [r7, #24]

	for(int i = DATA + OFFSET_OF_1; i< MSG_SIZE; i++)
 8004f5a:	230d      	movs	r3, #13
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f5e:	e008      	b.n	8004f72 <send_main_msg_light_color+0x3e>
		Tx_msg_light_color[i] = ZERO;
 8004f60:	f107 020c 	add.w	r2, r7, #12
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	4413      	add	r3, r2
 8004f68:	2200      	movs	r2, #0
 8004f6a:	701a      	strb	r2, [r3, #0]
	for(int i = DATA + OFFSET_OF_1; i< MSG_SIZE; i++)
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	3301      	adds	r3, #1
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	2b13      	cmp	r3, #19
 8004f76:	ddf3      	ble.n	8004f60 <send_main_msg_light_color+0x2c>

	Tx_msg_light_color[MSG_SIZE] = '\n';	// The 21st value -> Send (MSG_SIZE + OFFSET_OF_1) bytes
 8004f78:	230a      	movs	r3, #10
 8004f7a:	f887 3020 	strb.w	r3, [r7, #32]
	return HAL_UART_Transmit(uart,Tx_msg_light_color,MSG_SIZE+OFFSET_OF_1,DEFAULT_TIMEOUT);
 8004f7e:	f107 010c 	add.w	r1, r7, #12
 8004f82:	23c8      	movs	r3, #200	; 0xc8
 8004f84:	2215      	movs	r2, #21
 8004f86:	6838      	ldr	r0, [r7, #0]
 8004f88:	f7fe ff5d 	bl	8003e46 <HAL_UART_Transmit>
 8004f8c:	4603      	mov	r3, r0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	372c      	adds	r7, #44	; 0x2c
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd90      	pop	{r4, r7, pc}
 8004f96:	bf00      	nop
 8004f98:	08005444 	.word	0x08005444

08004f9c <send_sec_msg_air_extraction_tachymeter>:
 */

#include "sec_msg_gen.h"
#include "../../Inc/transport.h"

HAL_StatusTypeDef send_sec_msg_air_extraction_tachymeter(uint16_t tachy, UART_HandleTypeDef * uart){
 8004f9c:	b590      	push	{r4, r7, lr}
 8004f9e:	b08b      	sub	sp, #44	; 0x2c
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	6039      	str	r1, [r7, #0]
 8004fa6:	80fb      	strh	r3, [r7, #6]
	uint8_t Tx_msg_air_extraction_tachymeter[MSG_SIZE + 1] = {
 8004fa8:	4b18      	ldr	r3, [pc, #96]	; (800500c <send_sec_msg_air_extraction_tachymeter+0x70>)
 8004faa:	f107 040c 	add.w	r4, r7, #12
 8004fae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fb0:	c407      	stmia	r4!, {r0, r1, r2}
 8004fb2:	7023      	strb	r3, [r4, #0]
 8004fb4:	f107 0319 	add.w	r3, r7, #25
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	605a      	str	r2, [r3, #4]
		MSG_TYPE_SECONDARY, // Message type
		SEC_MSG_AIR_EXTRACTION_TACHYMETER, // Sub message type
		MSG_LENGTH_FIRST_BYTE, MSG_LENGTH_2_SECOND_BYTE // Length
	}; // 12 first bytes

	Tx_msg_air_extraction_tachymeter[DATA] = tachy >> 8; // takes two bytes because it's a uint16_t value
 8004fbe:	88fb      	ldrh	r3, [r7, #6]
 8004fc0:	0a1b      	lsrs	r3, r3, #8
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	763b      	strb	r3, [r7, #24]
	Tx_msg_air_extraction_tachymeter[DATA + 1] = tachy;
 8004fc8:	88fb      	ldrh	r3, [r7, #6]
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	767b      	strb	r3, [r7, #25]

	for(int i = DATA + 2; i< MSG_SIZE; i++)
 8004fce:	230e      	movs	r3, #14
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd2:	e008      	b.n	8004fe6 <send_sec_msg_air_extraction_tachymeter+0x4a>
		Tx_msg_air_extraction_tachymeter[i] = ZERO;
 8004fd4:	f107 020c 	add.w	r2, r7, #12
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	4413      	add	r3, r2
 8004fdc:	2200      	movs	r2, #0
 8004fde:	701a      	strb	r2, [r3, #0]
	for(int i = DATA + 2; i< MSG_SIZE; i++)
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	2b13      	cmp	r3, #19
 8004fea:	ddf3      	ble.n	8004fd4 <send_sec_msg_air_extraction_tachymeter+0x38>

	Tx_msg_air_extraction_tachymeter[MSG_SIZE] = '\n'; // The 21st value -> Send (MSG_SIZE + 1) bytes
 8004fec:	230a      	movs	r3, #10
 8004fee:	f887 3020 	strb.w	r3, [r7, #32]

	return HAL_UART_Transmit(uart,Tx_msg_air_extraction_tachymeter,MSG_SIZE+1,DEFAULT_TIMEOUT);
 8004ff2:	f107 010c 	add.w	r1, r7, #12
 8004ff6:	23c8      	movs	r3, #200	; 0xc8
 8004ff8:	2215      	movs	r2, #21
 8004ffa:	6838      	ldr	r0, [r7, #0]
 8004ffc:	f7fe ff23 	bl	8003e46 <HAL_UART_Transmit>
 8005000:	4603      	mov	r3, r0
}
 8005002:	4618      	mov	r0, r3
 8005004:	372c      	adds	r7, #44	; 0x2c
 8005006:	46bd      	mov	sp, r7
 8005008:	bd90      	pop	{r4, r7, pc}
 800500a:	bf00      	nop
 800500c:	080054d4 	.word	0x080054d4

08005010 <build_ack_msg_cmd>:
	MSG_TYPE_INFORMATION, 							// Message type
	CMD_ACK, 										// Sub message type
	MSG_LENGTH_FIRST_BYTE, MSG_LENGTH_1_SECOND_BYTE	// Length
}; 													// 12 first bytes

void build_ack_msg_cmd(uint8_t ack){
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	4603      	mov	r3, r0
 8005018:	71fb      	strb	r3, [r7, #7]
	// Ack value
	msg_ack_cmd[DATA] = ack;
 800501a:	4a0d      	ldr	r2, [pc, #52]	; (8005050 <build_ack_msg_cmd+0x40>)
 800501c:	79fb      	ldrb	r3, [r7, #7]
 800501e:	7313      	strb	r3, [r2, #12]

	// Padding with zeros
	for (int i=DATA + 1; i<MSG_SIZE; i++)
 8005020:	230d      	movs	r3, #13
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	e007      	b.n	8005036 <build_ack_msg_cmd+0x26>
		msg_ack_cmd[i] = ZERO;
 8005026:	4a0a      	ldr	r2, [pc, #40]	; (8005050 <build_ack_msg_cmd+0x40>)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4413      	add	r3, r2
 800502c:	2200      	movs	r2, #0
 800502e:	701a      	strb	r2, [r3, #0]
	for (int i=DATA + 1; i<MSG_SIZE; i++)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3301      	adds	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2b13      	cmp	r3, #19
 800503a:	ddf4      	ble.n	8005026 <build_ack_msg_cmd+0x16>

	msg_ack_cmd[MSG_SIZE] = '\n'; // The 21st value -> Send (MSG_SIZE + 1) bytes
 800503c:	4b04      	ldr	r3, [pc, #16]	; (8005050 <build_ack_msg_cmd+0x40>)
 800503e:	220a      	movs	r2, #10
 8005040:	751a      	strb	r2, [r3, #20]
}
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	2000000c 	.word	0x2000000c

08005054 <send_cmd_ack>:

void send_cmd_ack(UART_HandleTypeDef * uart){
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	build_ack_msg_cmd(ONE);
 800505c:	2001      	movs	r0, #1
 800505e:	f7ff ffd7 	bl	8005010 <build_ack_msg_cmd>
	HAL_UART_Transmit(uart, msg_ack_cmd, MSG_SIZE + 1, DEFAULT_TIMEOUT);
 8005062:	23c8      	movs	r3, #200	; 0xc8
 8005064:	2215      	movs	r2, #21
 8005066:	4904      	ldr	r1, [pc, #16]	; (8005078 <send_cmd_ack+0x24>)
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7fe feec 	bl	8003e46 <HAL_UART_Transmit>
}
 800506e:	bf00      	nop
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	2000000c 	.word	0x2000000c

0800507c <send_cmd_ack_with_value>:

void send_cmd_ack_with_value(UART_HandleTypeDef * uart, uint8_t value){
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	460b      	mov	r3, r1
 8005086:	70fb      	strb	r3, [r7, #3]
	build_ack_msg_cmd(value);
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff ffc0 	bl	8005010 <build_ack_msg_cmd>
	HAL_UART_Transmit(uart, msg_ack_cmd, MSG_SIZE + 1, DEFAULT_TIMEOUT);
 8005090:	23c8      	movs	r3, #200	; 0xc8
 8005092:	2215      	movs	r2, #21
 8005094:	4903      	ldr	r1, [pc, #12]	; (80050a4 <send_cmd_ack_with_value+0x28>)
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fe fed5 	bl	8003e46 <HAL_UART_Transmit>
}
 800509c:	bf00      	nop
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	2000000c 	.word	0x2000000c

080050a8 <send_cmd_nok>:

void send_cmd_nok(UART_HandleTypeDef * uart){
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
	build_ack_msg_cmd(ZERO);
 80050b0:	2000      	movs	r0, #0
 80050b2:	f7ff ffad 	bl	8005010 <build_ack_msg_cmd>
	HAL_UART_Transmit(uart, msg_ack_cmd, MSG_SIZE + 1, DEFAULT_TIMEOUT);
 80050b6:	23c8      	movs	r3, #200	; 0xc8
 80050b8:	2215      	movs	r2, #21
 80050ba:	4904      	ldr	r1, [pc, #16]	; (80050cc <send_cmd_nok+0x24>)
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7fe fec2 	bl	8003e46 <HAL_UART_Transmit>
}
 80050c2:	bf00      	nop
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	2000000c 	.word	0x2000000c

080050d0 <parser_cmd_udpate_watchdog>:


void parser_cmd_udpate_watchdog(uint8_t * rx_buff, UART_HandleTypeDef * uart){
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
	watchdog_update = true;
 80050da:	4b04      	ldr	r3, [pc, #16]	; (80050ec <parser_cmd_udpate_watchdog+0x1c>)
 80050dc:	2201      	movs	r2, #1
 80050de:	701a      	strb	r2, [r3, #0]
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	2000005d 	.word	0x2000005d

080050f0 <parser_cmd_force_reset>:

void parser_cmd_force_reset(uint8_t * rx_buff, UART_HandleTypeDef * uart){
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
	watchdog_actived = true;
 80050fa:	4b04      	ldr	r3, [pc, #16]	; (800510c <parser_cmd_force_reset+0x1c>)
 80050fc:	2201      	movs	r2, #1
 80050fe:	701a      	strb	r2, [r3, #0]
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	2000005c 	.word	0x2000005c

08005110 <parser_cmd_cooling_fan>:

void parser_cmd_cooling_fan(uint8_t * rx_buff,UART_HandleTypeDef * uart)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
	uint8_t data = rx_buff[DATA];
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	7b1b      	ldrb	r3, [r3, #12]
 800511e:	73fb      	strb	r3, [r7, #15]
	if(data >= MIN_PWM_FAN && data <= MAX_PWM_FAN)
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	2b64      	cmp	r3, #100	; 0x64
 8005124:	d802      	bhi.n	800512c <parser_cmd_cooling_fan+0x1c>
	{
		pwm_cooling_fan = data;
 8005126:	4a04      	ldr	r2, [pc, #16]	; (8005138 <parser_cmd_cooling_fan+0x28>)
 8005128:	7bfb      	ldrb	r3, [r7, #15]
 800512a:	7013      	strb	r3, [r2, #0]
	}
}
 800512c:	bf00      	nop
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	2000005e 	.word	0x2000005e

0800513c <parser_cmd_heater_fan>:

void parser_cmd_heater_fan(uint8_t * rx_buff,UART_HandleTypeDef * uart)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
	uint8_t data = rx_buff[DATA];
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	7b1b      	ldrb	r3, [r3, #12]
 800514a:	73fb      	strb	r3, [r7, #15]
	if(data >= MIN_PWM_FAN && data <= MAX_PWM_FAN)
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	2b64      	cmp	r3, #100	; 0x64
 8005150:	d802      	bhi.n	8005158 <parser_cmd_heater_fan+0x1c>
	{
		pwm_heater_fan = data;
 8005152:	4a04      	ldr	r2, [pc, #16]	; (8005164 <parser_cmd_heater_fan+0x28>)
 8005154:	7bfb      	ldrb	r3, [r7, #15]
 8005156:	7013      	strb	r3, [r2, #0]
	}
}
 8005158:	bf00      	nop
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	2000005f 	.word	0x2000005f

08005168 <parser_cmd_light_color>:

void parser_cmd_light_color(uint8_t * rx_buff,UART_HandleTypeDef * uart)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
	uint8_t data = rx_buff[DATA];
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	7b1b      	ldrb	r3, [r3, #12]
 8005176:	73fb      	strb	r3, [r7, #15]

	if(data >= LIGHT_COLOR_MIN_INDEX && data <= LIGHT_COLOR_MAX_INDEX)
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	2b06      	cmp	r3, #6
 800517c:	d802      	bhi.n	8005184 <parser_cmd_light_color+0x1c>
	{
		light_color = data;
 800517e:	4a04      	ldr	r2, [pc, #16]	; (8005190 <parser_cmd_light_color+0x28>)
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	7013      	strb	r3, [r2, #0]
	}
}
 8005184:	bf00      	nop
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	20000060 	.word	0x20000060

08005194 <parser_cmd>:





void parser_cmd(uint8_t * rx_buff, UART_HandleTypeDef * uart){
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
	uint8_t cmd_type = rx_buff[INFORMATION_TYPE]; // The first byte has already been checked. We want the second one with the cmd type
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	7a5b      	ldrb	r3, [r3, #9]
 80051a2:	73fb      	strb	r3, [r7, #15]

	switch(cmd_type){
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d835      	bhi.n	8005218 <parser_cmd+0x84>
 80051ac:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <parser_cmd+0x20>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	080051c9 	.word	0x080051c9
 80051b8:	080051d9 	.word	0x080051d9
 80051bc:	080051e9 	.word	0x080051e9
 80051c0:	080051f9 	.word	0x080051f9
 80051c4:	08005209 	.word	0x08005209
		case CMD_UPDATE_WATCHDOG:
			send_cmd_ack(uart);
 80051c8:	6838      	ldr	r0, [r7, #0]
 80051ca:	f7ff ff43 	bl	8005054 <send_cmd_ack>
			parser_cmd_udpate_watchdog(rx_buff, uart);
 80051ce:	6839      	ldr	r1, [r7, #0]
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7ff ff7d 	bl	80050d0 <parser_cmd_udpate_watchdog>
			break;
 80051d6:	e023      	b.n	8005220 <parser_cmd+0x8c>
		case CMD_FORCE_RESET:
			send_cmd_ack(uart);
 80051d8:	6838      	ldr	r0, [r7, #0]
 80051da:	f7ff ff3b 	bl	8005054 <send_cmd_ack>
			parser_cmd_force_reset(rx_buff, uart);
 80051de:	6839      	ldr	r1, [r7, #0]
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff ff85 	bl	80050f0 <parser_cmd_force_reset>
			break;
 80051e6:	e01b      	b.n	8005220 <parser_cmd+0x8c>
		case CMD_COOLING_FAN:
			send_cmd_ack(uart);
 80051e8:	6838      	ldr	r0, [r7, #0]
 80051ea:	f7ff ff33 	bl	8005054 <send_cmd_ack>
			parser_cmd_cooling_fan(rx_buff, uart);
 80051ee:	6839      	ldr	r1, [r7, #0]
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7ff ff8d 	bl	8005110 <parser_cmd_cooling_fan>
			break;
 80051f6:	e013      	b.n	8005220 <parser_cmd+0x8c>
		case CMD_HEATER_FAN:
			send_cmd_ack(uart);
 80051f8:	6838      	ldr	r0, [r7, #0]
 80051fa:	f7ff ff2b 	bl	8005054 <send_cmd_ack>
			parser_cmd_heater_fan(rx_buff, uart);
 80051fe:	6839      	ldr	r1, [r7, #0]
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff ff9b 	bl	800513c <parser_cmd_heater_fan>
			break;
 8005206:	e00b      	b.n	8005220 <parser_cmd+0x8c>
		case CMD_LIGHT_COLOR:
			send_cmd_ack(uart);
 8005208:	6838      	ldr	r0, [r7, #0]
 800520a:	f7ff ff23 	bl	8005054 <send_cmd_ack>
			parser_cmd_light_color(rx_buff, uart);
 800520e:	6839      	ldr	r1, [r7, #0]
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7ff ffa9 	bl	8005168 <parser_cmd_light_color>
			break;
 8005216:	e003      	b.n	8005220 <parser_cmd+0x8c>
		default:
			send_cmd_nok(uart);
 8005218:	6838      	ldr	r0, [r7, #0]
 800521a:	f7ff ff45 	bl	80050a8 <send_cmd_nok>
	}

}
 800521e:	bf00      	nop
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <check_msg_identifier>:
	CMD_ACK, // Sub message type
	MSG_LENGTH_FIRST_BYTE, MSG_LENGTH_1_SECOND_BYTE // Length
}; // 12 first bytes

bool check_msg_identifier(uint8_t * rx_buff)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
	return rx_buff[IDENTIFIER_FIRST_BYTE] == MSG_HEADER_IDENTIFIER_FIRST_BYTE
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	781b      	ldrb	r3, [r3, #0]
		&& rx_buff[IDENTIFIER_SECOND_BYTE] == MSG_HEADER_IDENTIFIER_SECOND_BYTE;
 8005234:	2b01      	cmp	r3, #1
 8005236:	d106      	bne.n	8005246 <check_msg_identifier+0x1e>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3301      	adds	r3, #1
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <check_msg_identifier+0x1e>
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <check_msg_identifier+0x20>
 8005246:	2300      	movs	r3, #0
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	b2db      	uxtb	r3, r3
}
 800524e:	4618      	mov	r0, r3
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <check_msg_UID>:

bool check_msg_UID(uint8_t * rx_buff)
{
 800525a:	b480      	push	{r7}
 800525c:	b085      	sub	sp, #20
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
	bool is_receiver = rx_buff[UID_1_TYPOLOGY] == MSG_HEADER_UID_1_TYPOLOGY
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3304      	adds	r3, #4
 8005266:	781b      	ldrb	r3, [r3, #0]
				    && rx_buff[UID_2_MONTH] == MSG_HEADER_UID_2_MONTH
					&& rx_buff[UID_3_YEAR] == MSG_HEADER_UID_3_YEAR
				    && rx_buff[UID_4_ID] == MSG_HEADER_UID_4_ID;
 8005268:	2bc2      	cmp	r3, #194	; 0xc2
 800526a:	d110      	bne.n	800528e <check_msg_UID+0x34>
				    && rx_buff[UID_2_MONTH] == MSG_HEADER_UID_2_MONTH
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3305      	adds	r3, #5
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10b      	bne.n	800528e <check_msg_UID+0x34>
					&& rx_buff[UID_3_YEAR] == MSG_HEADER_UID_3_YEAR
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3306      	adds	r3, #6
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d106      	bne.n	800528e <check_msg_UID+0x34>
				    && rx_buff[UID_4_ID] == MSG_HEADER_UID_4_ID;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3307      	adds	r3, #7
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <check_msg_UID+0x34>
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <check_msg_UID+0x36>
 800528e:	2300      	movs	r3, #0
	bool is_receiver = rx_buff[UID_1_TYPOLOGY] == MSG_HEADER_UID_1_TYPOLOGY
 8005290:	73fb      	strb	r3, [r7, #15]
 8005292:	7bfb      	ldrb	r3, [r7, #15]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	73fb      	strb	r3, [r7, #15]

	bool is_broadcast = rx_buff[UID_1_TYPOLOGY] == MSG_HEADER_UID_1_BROADCAST
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3304      	adds	r3, #4
 800529e:	781b      	ldrb	r3, [r3, #0]
					 && rx_buff[UID_2_MONTH] == MSG_HEADER_UID_BROADCAST
					 && rx_buff[UID_3_YEAR] == MSG_HEADER_UID_BROADCAST
					 && rx_buff[UID_4_ID] == MSG_HEADER_UID_BROADCAST;
 80052a0:	2bcf      	cmp	r3, #207	; 0xcf
 80052a2:	d110      	bne.n	80052c6 <check_msg_UID+0x6c>
					 && rx_buff[UID_2_MONTH] == MSG_HEADER_UID_BROADCAST
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3305      	adds	r3, #5
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2bff      	cmp	r3, #255	; 0xff
 80052ac:	d10b      	bne.n	80052c6 <check_msg_UID+0x6c>
					 && rx_buff[UID_3_YEAR] == MSG_HEADER_UID_BROADCAST
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3306      	adds	r3, #6
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2bff      	cmp	r3, #255	; 0xff
 80052b6:	d106      	bne.n	80052c6 <check_msg_UID+0x6c>
					 && rx_buff[UID_4_ID] == MSG_HEADER_UID_BROADCAST;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3307      	adds	r3, #7
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	2bff      	cmp	r3, #255	; 0xff
 80052c0:	d101      	bne.n	80052c6 <check_msg_UID+0x6c>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <check_msg_UID+0x6e>
 80052c6:	2300      	movs	r3, #0
	bool is_broadcast = rx_buff[UID_1_TYPOLOGY] == MSG_HEADER_UID_1_BROADCAST
 80052c8:	73bb      	strb	r3, [r7, #14]
 80052ca:	7bbb      	ldrb	r3, [r7, #14]
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	73bb      	strb	r3, [r7, #14]

	return (is_receiver || is_broadcast);
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d102      	bne.n	80052de <check_msg_UID+0x84>
 80052d8:	7bbb      	ldrb	r3, [r7, #14]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <check_msg_UID+0x88>
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <check_msg_UID+0x8a>
 80052e2:	2300      	movs	r3, #0
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	b2db      	uxtb	r3, r3
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <check_msg_size>:

bool check_msg_size(uint8_t * rx_buff)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
	return rx_buff[LENGTH_FIRST_BYTE] == MSG_HEADER_SIZE_FIRST_BYTE
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3302      	adds	r3, #2
 8005302:	781b      	ldrb	r3, [r3, #0]
		&& rx_buff[LENGTH_SECOND_BYTE] == MSG_HEADER_SIZE_SECOND_BYTE;
 8005304:	2b00      	cmp	r3, #0
 8005306:	d106      	bne.n	8005316 <check_msg_size+0x20>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3303      	adds	r3, #3
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b10      	cmp	r3, #16
 8005310:	d101      	bne.n	8005316 <check_msg_size+0x20>
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <check_msg_size+0x22>
 8005316:	2300      	movs	r3, #0
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	b2db      	uxtb	r3, r3
}
 800531e:	4618      	mov	r0, r3
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
	...

0800532c <build_ack_msg>:

void build_ack_msg(uint8_t ack)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	4603      	mov	r3, r0
 8005334:	71fb      	strb	r3, [r7, #7]
	// Ack value
	msg_ack[DATA] = ack;
 8005336:	4a0c      	ldr	r2, [pc, #48]	; (8005368 <build_ack_msg+0x3c>)
 8005338:	79fb      	ldrb	r3, [r7, #7]
 800533a:	7313      	strb	r3, [r2, #12]

	// Padding with zeros
	for (int i=DATA + 1; i < MSG_SIZE; i++)
 800533c:	230d      	movs	r3, #13
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	e007      	b.n	8005352 <build_ack_msg+0x26>
	{
		msg_ack[i] = ZERO;
 8005342:	4a09      	ldr	r2, [pc, #36]	; (8005368 <build_ack_msg+0x3c>)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4413      	add	r3, r2
 8005348:	2200      	movs	r2, #0
 800534a:	701a      	strb	r2, [r3, #0]
	for (int i=DATA + 1; i < MSG_SIZE; i++)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3301      	adds	r3, #1
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b13      	cmp	r3, #19
 8005356:	ddf4      	ble.n	8005342 <build_ack_msg+0x16>
	}
}
 8005358:	bf00      	nop
 800535a:	bf00      	nop
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	20000024 	.word	0x20000024

0800536c <parser>:

void parser(uint8_t * rx_buff, UART_HandleTypeDef * uart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]

	if(check_msg_identifier(rx_buff))
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff ff56 	bl	8005228 <check_msg_identifier>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d020      	beq.n	80053c4 <parser+0x58>
	{

		// This message is from the Jetson Nano
		if(check_msg_size(rx_buff))
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7ff ffb7 	bl	80052f6 <check_msg_size>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d01a      	beq.n	80053c4 <parser+0x58>
		{

			// This message has the correct size
			if(check_msg_UID(rx_buff))
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7ff ff63 	bl	800525a <check_msg_UID>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d014      	beq.n	80053c4 <parser+0x58>
			{

				// This messages is for this STM32
				uint8_t msg_type = rx_buff[MSG_TYPE];
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	7a1b      	ldrb	r3, [r3, #8]
 800539e:	73fb      	strb	r3, [r7, #15]

				switch(msg_type)
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d104      	bne.n	80053b0 <parser+0x44>
				{
					case MSG_TYPE_COMMAND:
						parser_cmd(rx_buff, uart);
 80053a6:	6839      	ldr	r1, [r7, #0]
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff fef3 	bl	8005194 <parser_cmd>
						break;
 80053ae:	e00a      	b.n	80053c6 <parser+0x5a>
					default:
						// Unknown message --> Sending ACK NOK
						build_ack_msg(ZERO);
 80053b0:	2000      	movs	r0, #0
 80053b2:	f7ff ffbb 	bl	800532c <build_ack_msg>
						HAL_UART_Transmit(uart, msg_ack, MSG_SIZE, DEFAULT_TIMEOUT);
 80053b6:	23c8      	movs	r3, #200	; 0xc8
 80053b8:	2214      	movs	r2, #20
 80053ba:	4905      	ldr	r1, [pc, #20]	; (80053d0 <parser+0x64>)
 80053bc:	6838      	ldr	r0, [r7, #0]
 80053be:	f7fe fd42 	bl	8003e46 <HAL_UART_Transmit>
						break;
 80053c2:	e000      	b.n	80053c6 <parser+0x5a>
				}
			}
 80053c4:	bf00      	nop
		}
	}
}
 80053c6:	bf00      	nop
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20000024 	.word	0x20000024

080053d4 <__libc_init_array>:
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	4d0d      	ldr	r5, [pc, #52]	; (800540c <__libc_init_array+0x38>)
 80053d8:	4c0d      	ldr	r4, [pc, #52]	; (8005410 <__libc_init_array+0x3c>)
 80053da:	1b64      	subs	r4, r4, r5
 80053dc:	10a4      	asrs	r4, r4, #2
 80053de:	2600      	movs	r6, #0
 80053e0:	42a6      	cmp	r6, r4
 80053e2:	d109      	bne.n	80053f8 <__libc_init_array+0x24>
 80053e4:	4d0b      	ldr	r5, [pc, #44]	; (8005414 <__libc_init_array+0x40>)
 80053e6:	4c0c      	ldr	r4, [pc, #48]	; (8005418 <__libc_init_array+0x44>)
 80053e8:	f000 f820 	bl	800542c <_init>
 80053ec:	1b64      	subs	r4, r4, r5
 80053ee:	10a4      	asrs	r4, r4, #2
 80053f0:	2600      	movs	r6, #0
 80053f2:	42a6      	cmp	r6, r4
 80053f4:	d105      	bne.n	8005402 <__libc_init_array+0x2e>
 80053f6:	bd70      	pop	{r4, r5, r6, pc}
 80053f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053fc:	4798      	blx	r3
 80053fe:	3601      	adds	r6, #1
 8005400:	e7ee      	b.n	80053e0 <__libc_init_array+0xc>
 8005402:	f855 3b04 	ldr.w	r3, [r5], #4
 8005406:	4798      	blx	r3
 8005408:	3601      	adds	r6, #1
 800540a:	e7f2      	b.n	80053f2 <__libc_init_array+0x1e>
 800540c:	0800550c 	.word	0x0800550c
 8005410:	0800550c 	.word	0x0800550c
 8005414:	0800550c 	.word	0x0800550c
 8005418:	08005510 	.word	0x08005510

0800541c <memset>:
 800541c:	4402      	add	r2, r0
 800541e:	4603      	mov	r3, r0
 8005420:	4293      	cmp	r3, r2
 8005422:	d100      	bne.n	8005426 <memset+0xa>
 8005424:	4770      	bx	lr
 8005426:	f803 1b01 	strb.w	r1, [r3], #1
 800542a:	e7f9      	b.n	8005420 <memset+0x4>

0800542c <_init>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	bf00      	nop
 8005430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005432:	bc08      	pop	{r3}
 8005434:	469e      	mov	lr, r3
 8005436:	4770      	bx	lr

08005438 <_fini>:
 8005438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543a:	bf00      	nop
 800543c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800543e:	bc08      	pop	{r3}
 8005440:	469e      	mov	lr, r3
 8005442:	4770      	bx	lr
